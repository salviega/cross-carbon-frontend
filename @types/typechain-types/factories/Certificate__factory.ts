/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Certificate, CertificateInterface } from "../Certificate";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_name",
        type: "string",
      },
      {
        internalType: "string",
        name: "_symbol",
        type: "string",
      },
      {
        internalType: "string",
        name: "_baseURI",
        type: "string",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "ERC721IncorrectOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ERC721InsufficientApproval",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "approver",
        type: "address",
      },
    ],
    name: "ERC721InvalidApprover",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "ERC721InvalidOperator",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "ERC721InvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
    ],
    name: "ERC721InvalidReceiver",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "sender",
        type: "address",
      },
    ],
    name: "ERC721InvalidSender",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ERC721NonexistentToken",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "_baseURI",
        type: "string",
      },
    ],
    name: "changeBaseURI",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "_to",
        type: "address",
      },
    ],
    name: "safeMint",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenIdCounter",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "address",
        name: "",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60806040523480156200001157600080fd5b50604051620014c2380380620014c28339810160408190526200003491620001c1565b3383836000620000458382620002e1565b506001620000548282620002e1565b5050506001600160a01b0381166200008657604051631e4fbdf760e01b81526000600482015260240160405180910390fd5b6200009181620000aa565b506008620000a08282620002e1565b50505050620003ad565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200012457600080fd5b81516001600160401b0380821115620001415762000141620000fc565b604051601f8301601f19908116603f011681019082821181831017156200016c576200016c620000fc565b816040528381526020925086838588010111156200018957600080fd5b600091505b83821015620001ad57858201830151818301840152908201906200018e565b600093810190920192909252949350505050565b600080600060608486031215620001d757600080fd5b83516001600160401b0380821115620001ef57600080fd5b620001fd8783880162000112565b945060208601519150808211156200021457600080fd5b620002228783880162000112565b935060408601519150808211156200023957600080fd5b50620002488682870162000112565b9150509250925092565b600181811c908216806200026757607f821691505b6020821081036200028857634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620002dc57600081815260208120601f850160051c81016020861015620002b75750805b601f850160051c820191505b81811015620002d857828155600101620002c3565b5050505b505050565b81516001600160401b03811115620002fd57620002fd620000fc565b62000315816200030e845462000252565b846200028e565b602080601f8311600181146200034d5760008415620003345750858301515b600019600386901b1c1916600185901b178555620002d8565b600085815260208120601f198616915b828110156200037e578886015182559484019460019091019084016200035d565b50858210156200039d5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b61110580620003bd6000396000f3fe608060405234801561001057600080fd5b50600436106101215760003560e01c806370a08231116100ad578063a22cb46511610071578063a22cb4651461024d578063b88d4fde14610260578063c87b56dd14610273578063e985e9c514610286578063f2fde38b1461029957600080fd5b806370a0823114610210578063715018a6146102235780638da5cb5b1461022b57806395d89b411461023c57806398bdf6f51461024457600080fd5b806323b872dd116100f457806323b872dd146101a357806339a0c6f9146101b657806340d097c3146101c957806342842e0e146101ea5780636352211e146101fd57600080fd5b806301ffc9a71461012657806306fdde031461014e578063081812fc14610163578063095ea7b31461018e575b600080fd5b610139610134366004610c18565b6102ac565b60405190151581526020015b60405180910390f35b6101566102fe565b6040516101459190610c82565b610176610171366004610c95565b610390565b6040516001600160a01b039091168152602001610145565b6101a161019c366004610cc5565b6103b9565b005b6101a16101b1366004610cef565b6103fe565b6101a16101c4366004610db7565b610446565b6101dc6101d7366004610e00565b61045e565b604051908152602001610145565b6101a16101f8366004610cef565b610491565b61017661020b366004610c95565b6104b1565b6101dc61021e366004610e00565b6104bc565b6101a1610504565b6006546001600160a01b0316610176565b610156610518565b6101dc60075481565b6101a161025b366004610e1b565b610527565b6101a161026e366004610e57565b61056f565b610156610281366004610c95565b6105b7565b610139610294366004610ed3565b610655565b6101a16102a7366004610e00565b610683565b60006001600160e01b031982166380ac58cd60e01b14806102dd57506001600160e01b03198216635b5e139f60e01b145b806102f857506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606000805461030d90610f06565b80601f016020809104026020016040519081016040528092919081815260200182805461033990610f06565b80156103865780601f1061035b57610100808354040283529160200191610386565b820191906000526020600020905b81548152906001019060200180831161036957829003601f168201915b5050505050905090565b600061039b826106c1565b506000828152600460205260409020546001600160a01b03166102f8565b60405162461bcd60e51b8152602060048201526015602482015274105c1c1c9bdd99481a5cdb89dd08185b1b1bddd959605a1b60448201526064015b60405180910390fd5b60405162461bcd60e51b815260206004820152601a60248201527f7472616e7366657246726f6d2069736e277420616c6c6f77656400000000000060448201526064016103f5565b61044e6106fa565b600861045a8282610f8e565b5050565b60006104686106fa565b60078054908190600061047a8361104e565b91905055506104898382610727565b90505b919050565b6104ac8383836040518060200160405280600081525061056f565b505050565b60006102f8826106c1565b60006001600160a01b0382166104e8576040516322718ad960e21b8152600060048201526024016103f5565b506001600160a01b031660009081526003602052604090205490565b61050c6106fa565b6105166000610741565b565b60606001805461030d90610f06565b60405162461bcd60e51b815260206004820152601f60248201527f736574417070726f76616c466f72416c6c2069736e277420616c6c6f7765640060448201526064016103f5565b60405162461bcd60e51b815260206004820152601e60248201527f736166655472616e7366657246726f6d2069736e277420616c6c6f776564000060448201526064016103f5565b60606105c2826106c1565b50600880546105d090610f06565b80601f01602080910402602001604051908101604052809291908181526020018280546105fc90610f06565b80156106495780601f1061061e57610100808354040283529160200191610649565b820191906000526020600020905b81548152906001019060200180831161062c57829003601f168201915b50505050509050919050565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61068b6106fa565b6001600160a01b0381166106b557604051631e4fbdf760e01b8152600060048201526024016103f5565b6106be81610741565b50565b6000818152600260205260408120546001600160a01b03168061048957604051637e27328960e01b8152600481018490526024016103f5565b6006546001600160a01b031633146105165760405163118cdaa760e01b81523360048201526024016103f5565b61045a828260405180602001604052806000815250610793565b600680546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b61079d83836107aa565b6104ac600084848461080f565b6001600160a01b0382166107d457604051633250574960e11b8152600060048201526024016103f5565b60006107e283836000610939565b90506001600160a01b038116156104ac576040516339e3563760e11b8152600060048201526024016103f5565b6001600160a01b0383163b1561093357604051630a85bd0160e11b81526001600160a01b0384169063150b7a0290610851903390889087908790600401611075565b6020604051808303816000875af192505050801561088c575060408051601f3d908101601f19168201909252610889918101906110b2565b60015b6108f5573d8080156108ba576040519150601f19603f3d011682016040523d82523d6000602084013e6108bf565b606091505b5080516000036108ed57604051633250574960e11b81526001600160a01b03851660048201526024016103f5565b805181602001fd5b6001600160e01b03198116630a85bd0160e11b1461093157604051633250574960e11b81526001600160a01b03851660048201526024016103f5565b505b50505050565b6000828152600260205260408120546001600160a01b039081169083161561096657610966818486610a32565b6001600160a01b038116156109a457610983600085600080610a96565b6001600160a01b038116600090815260036020526040902080546000190190555b6001600160a01b038516156109d3576001600160a01b0385166000908152600360205260409020805460010190555b60008481526002602052604080822080546001600160a01b0319166001600160a01b0389811691821790925591518793918516917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4949350505050565b610a3d838383610b9c565b6104ac576001600160a01b038316610a6b57604051637e27328960e01b8152600481018290526024016103f5565b60405163177e802f60e01b81526001600160a01b0383166004820152602481018290526044016103f5565b8080610aaa57506001600160a01b03821615155b15610b6c576000610aba846106c1565b90506001600160a01b03831615801590610ae65750826001600160a01b0316816001600160a01b031614155b8015610af95750610af78184610655565b155b15610b225760405163a9fbf51f60e01b81526001600160a01b03841660048201526024016103f5565b8115610b6a5783856001600160a01b0316826001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45b505b5050600090815260046020526040902080546001600160a01b0319166001600160a01b0392909216919091179055565b60006001600160a01b03831615801590610bfa5750826001600160a01b0316846001600160a01b03161480610bd65750610bd68484610655565b80610bfa57506000828152600460205260409020546001600160a01b038481169116145b949350505050565b6001600160e01b0319811681146106be57600080fd5b600060208284031215610c2a57600080fd5b8135610c3581610c02565b9392505050565b6000815180845260005b81811015610c6257602081850181015186830182015201610c46565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610c356020830184610c3c565b600060208284031215610ca757600080fd5b5035919050565b80356001600160a01b038116811461048c57600080fd5b60008060408385031215610cd857600080fd5b610ce183610cae565b946020939093013593505050565b600080600060608486031215610d0457600080fd5b610d0d84610cae565b9250610d1b60208501610cae565b9150604084013590509250925092565b634e487b7160e01b600052604160045260246000fd5b600067ffffffffffffffff80841115610d5c57610d5c610d2b565b604051601f8501601f19908116603f01168101908282118183101715610d8457610d84610d2b565b81604052809350858152868686011115610d9d57600080fd5b858560208301376000602087830101525050509392505050565b600060208284031215610dc957600080fd5b813567ffffffffffffffff811115610de057600080fd5b8201601f81018413610df157600080fd5b610bfa84823560208401610d41565b600060208284031215610e1257600080fd5b610c3582610cae565b60008060408385031215610e2e57600080fd5b610e3783610cae565b915060208301358015158114610e4c57600080fd5b809150509250929050565b60008060008060808587031215610e6d57600080fd5b610e7685610cae565b9350610e8460208601610cae565b925060408501359150606085013567ffffffffffffffff811115610ea757600080fd5b8501601f81018713610eb857600080fd5b610ec787823560208401610d41565b91505092959194509250565b60008060408385031215610ee657600080fd5b610eef83610cae565b9150610efd60208401610cae565b90509250929050565b600181811c90821680610f1a57607f821691505b602082108103610f3a57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156104ac57600081815260208120601f850160051c81016020861015610f675750805b601f850160051c820191505b81811015610f8657828155600101610f73565b505050505050565b815167ffffffffffffffff811115610fa857610fa8610d2b565b610fbc81610fb68454610f06565b84610f40565b602080601f831160018114610ff15760008415610fd95750858301515b600019600386901b1c1916600185901b178555610f86565b600085815260208120601f198616915b8281101561102057888601518255948401946001909101908401611001565b508582101561103e5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b60006001820161106e57634e487b7160e01b600052601160045260246000fd5b5060010190565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906110a890830184610c3c565b9695505050505050565b6000602082840312156110c457600080fd5b8151610c3581610c0256fea264697066735822122099da6fe18a0d44e0c59660fd757c24e47a7b2406e9796c9b5c9710b48caccd9c64736f6c63430008140033";

type CertificateConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CertificateConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Certificate__factory extends ContractFactory {
  constructor(...args: CertificateConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Certificate";
  }

  deploy(
    _name: string,
    _symbol: string,
    _baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Certificate> {
    return super.deploy(
      _name,
      _symbol,
      _baseURI,
      overrides || {}
    ) as Promise<Certificate>;
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    _baseURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      _name,
      _symbol,
      _baseURI,
      overrides || {}
    );
  }
  attach(address: string): Certificate {
    return super.attach(address) as Certificate;
  }
  connect(signer: Signer): Certificate__factory {
    return super.connect(signer) as Certificate__factory;
  }
  static readonly contractName: "Certificate";
  public readonly contractName: "Certificate";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CertificateInterface {
    return new utils.Interface(_abi) as CertificateInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Certificate {
    return new Contract(address, _abi, signerOrProvider) as Certificate;
  }
}
