/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  FunctionsRequest,
  FunctionsRequestInterface,
} from "../FunctionsRequest";

const _abi = [
  {
    inputs: [],
    name: "EmptyArgs",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptySecrets",
    type: "error",
  },
  {
    inputs: [],
    name: "EmptySource",
    type: "error",
  },
  {
    inputs: [],
    name: "NoInlineSecrets",
    type: "error",
  },
  {
    inputs: [],
    name: "REQUEST_DATA_VERSION",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x608080604052346018576075908161001e823930815050f35b600080fdfe6080806040526004361015601257600080fd5b60003560e01c635d641dfc14602657600080fd5b6000366003190112603a5780600160209252f35b600080fdfea264697066735822122090cb4ec279128aeb33bdbaeda4794d59e11d1cf27534803e6aa73590f4d22ced64736f6c63430008140033";

type FunctionsRequestConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: FunctionsRequestConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class FunctionsRequest__factory extends ContractFactory {
  constructor(...args: FunctionsRequestConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "FunctionsRequest";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<FunctionsRequest> {
    return super.deploy(overrides || {}) as Promise<FunctionsRequest>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): FunctionsRequest {
    return super.attach(address) as FunctionsRequest;
  }
  connect(signer: Signer): FunctionsRequest__factory {
    return super.connect(signer) as FunctionsRequest__factory;
  }
  static readonly contractName: "FunctionsRequest";
  public readonly contractName: "FunctionsRequest";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): FunctionsRequestInterface {
    return new utils.Interface(_abi) as FunctionsRequestInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): FunctionsRequest {
    return new Contract(address, _abi, signerOrProvider) as FunctionsRequest;
  }
}
