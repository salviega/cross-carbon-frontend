/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Communicator, CommunicatorInterface } from "../Communicator";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_router",
        type: "address",
      },
      {
        internalType: "address",
        name: "_link",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "router",
        type: "address",
      },
    ],
    name: "InvalidRouter",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "OwnableInvalidOwner",
    type: "error",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "account",
        type: "address",
      },
    ],
    name: "OwnableUnauthorizedAccount",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "previousOwner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "OwnershipTransferred",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "string",
        name: "message",
        type: "string",
      },
    ],
    name: "ReceivedMessage",
    type: "event",
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: "bytes32",
            name: "messageId",
            type: "bytes32",
          },
          {
            internalType: "uint64",
            name: "sourceChainSelector",
            type: "uint64",
          },
          {
            internalType: "bytes",
            name: "sender",
            type: "bytes",
          },
          {
            internalType: "bytes",
            name: "data",
            type: "bytes",
          },
          {
            components: [
              {
                internalType: "address",
                name: "token",
                type: "address",
              },
              {
                internalType: "uint256",
                name: "amount",
                type: "uint256",
              },
            ],
            internalType: "struct Client.EVMTokenAmount[]",
            name: "destTokenAmounts",
            type: "tuple[]",
          },
        ],
        internalType: "struct Client.Any2EVMMessage",
        name: "message",
        type: "tuple",
      },
    ],
    name: "ccipReceive",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "getRouter",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "owner",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "renounceOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "s_lastMessage",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "s_lastSender",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "receiver",
        type: "address",
      },
      {
        internalType: "string",
        name: "messageContent",
        type: "string",
      },
      {
        internalType: "uint64",
        name: "destinationChainSelector",
        type: "uint64",
      },
    ],
    name: "send",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newOwner",
        type: "address",
      },
    ],
    name: "transferOwnership",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523480156200001157600080fd5b5060405162000f1d38038062000f1d8339810160408190526200003491620001ab565b8133806200005d57604051631e4fbdf760e01b8152600060048201526024015b60405180910390fd5b62000068816200013e565b506001600160a01b03811662000095576040516335fdcccd60e21b81526000600482015260240162000054565b6001600160a01b03908116608052600380548483166001600160a01b0319918216811790925560048054938516939091168317815560405163095ea7b360e01b815290810191909152600019602482015263095ea7b3906044016020604051808303816000875af11580156200010f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001359190620001e3565b5050506200020e565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80516001600160a01b0381168114620001a657600080fd5b919050565b60008060408385031215620001bf57600080fd5b620001ca836200018e565b9150620001da602084016200018e565b90509250929050565b600060208284031215620001f657600080fd5b815180151581146200020757600080fd5b9392505050565b608051610cec620002316000396000818161012c01526103a60152610cec6000f3fe608060405234801561001057600080fd5b50600436106100935760003560e01c806385572ffb1161006657806385572ffb146100f25780638da5cb5b14610105578063b0f479a11461012a578063f2fde38b14610150578063f452ca721461016357600080fd5b806301ffc9a7146100985780631006e55d146100c0578063570b31f0146100d5578063715018a6146100ea575b600080fd5b6100ab6100a6366004610556565b610176565b60405190151581526020015b60405180910390f35b6100c86101ad565b6040516100b791906105d7565b6100e86100e3366004610715565b61023b565b005b6100e8610387565b6100e8610100366004610789565b61039b565b6000546001600160a01b03165b6040516001600160a01b0390911681526020016100b7565b7f0000000000000000000000000000000000000000000000000000000000000000610112565b6100e861015e3660046107c4565b6103ff565b600154610112906001600160a01b031681565b60006001600160e01b031982166385572ffb60e01b14806101a757506001600160e01b031982166301ffc9a760e01b145b92915050565b600280546101ba906107e1565b80601f01602080910402602001604051908101604052809291908181526020018280546101e6906107e1565b80156102335780601f1061020857610100808354040283529160200191610233565b820191906000526020600020905b81548152906001019060200180831161021657829003601f168201915b505050505081565b61024361043a565b6040805160a081019091526001600160a01b03841660c08201526000908060e0810160405160208183030381529060405281526020018460405160200161028a91906105d7565b60408051601f19818403018152919052815260200160006040519080825280602002602001820160405280156102e657816020015b60408051808201909152600080825260208201528152602001906001900390816102bf5790505b508152600480546001600160a01b03908116602080850191909152604080519182018152600082529384015260035492516396f4e9f960e01b815293945091909116916396f4e9f99161033d91869186910161081b565b6020604051808303816000875af115801561035c573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061038091906108f5565b5050505050565b61038f61043a565b6103996000610467565b565b336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016146103eb576040516335fdcccd60e21b81523360048201526024015b60405180910390fd5b6103fc6103f7826109db565b6104b7565b50565b61040761043a565b6001600160a01b03811661043157604051631e4fbdf760e01b8152600060048201526024016103e2565b6103fc81610467565b6000546001600160a01b031633146103995760405163118cdaa760e01b81523360048201526024016103e2565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b80604001518060200190518101906104cf9190610a88565b600160006101000a8154816001600160a01b0302191690836001600160a01b03160217905550806060015180602001905181019061050d9190610aa5565b60029061051a9082610b6b565b507fc96e84c3d3c9d81f3c5ffefc52940ba337cc31f09385e2944799fbb78d536d09600260405161054b9190610c2b565b60405180910390a150565b60006020828403121561056857600080fd5b81356001600160e01b03198116811461058057600080fd5b9392505050565b60005b838110156105a257818101518382015260200161058a565b50506000910152565b600081518084526105c3816020860160208601610587565b601f01601f19169290920160200192915050565b60208152600061058060208301846105ab565b6001600160a01b03811681146103fc57600080fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715610638576106386105ff565b60405290565b60405160a0810167ffffffffffffffff81118282101715610638576106386105ff565b604051601f8201601f1916810167ffffffffffffffff8111828210171561068a5761068a6105ff565b604052919050565b600067ffffffffffffffff8211156106ac576106ac6105ff565b50601f01601f191660200190565b60006106cd6106c884610692565b610661565b90508281528383830111156106e157600080fd5b828260208301376000602084830101529392505050565b803567ffffffffffffffff8116811461071057600080fd5b919050565b60008060006060848603121561072a57600080fd5b8335610735816105ea565b9250602084013567ffffffffffffffff81111561075157600080fd5b8401601f8101861361076257600080fd5b610771868235602084016106ba565b925050610780604085016106f8565b90509250925092565b60006020828403121561079b57600080fd5b813567ffffffffffffffff8111156107b257600080fd5b820160a0818503121561058057600080fd5b6000602082840312156107d657600080fd5b8135610580816105ea565b600181811c908216806107f557607f821691505b60208210810361081557634e487b7160e01b600052602260045260246000fd5b50919050565b6000604067ffffffffffffffff8516835260208181850152845160a08386015261084860e08601826105ab565b905081860151603f198087840301606088015261086583836105ab565b88860151888203830160808a01528051808352908601945060009350908501905b808410156108b857845180516001600160a01b0316835286015186830152938501936001939093019290860190610886565b5060608901516001600160a01b031660a08901526080890151888203830160c08a015295506108e781876105ab565b9a9950505050505050505050565b60006020828403121561090757600080fd5b5051919050565b600082601f83011261091f57600080fd5b610580838335602085016106ba565b600082601f83011261093f57600080fd5b8135602067ffffffffffffffff82111561095b5761095b6105ff565b610969818360051b01610661565b82815260069290921b8401810191818101908684111561098857600080fd5b8286015b848110156109d057604081890312156109a55760008081fd5b6109ad610615565b81356109b8816105ea565b8152818501358582015283529183019160400161098c565b509695505050505050565b600060a082360312156109ed57600080fd5b6109f561063e565b82358152610a05602084016106f8565b6020820152604083013567ffffffffffffffff80821115610a2557600080fd5b610a313683870161090e565b60408401526060850135915080821115610a4a57600080fd5b610a563683870161090e565b60608401526080850135915080821115610a6f57600080fd5b50610a7c3682860161092e565b60808301525092915050565b600060208284031215610a9a57600080fd5b8151610580816105ea565b600060208284031215610ab757600080fd5b815167ffffffffffffffff811115610ace57600080fd5b8201601f81018413610adf57600080fd5b8051610aed6106c882610692565b818152856020838501011115610b0257600080fd5b610b13826020830160208601610587565b95945050505050565b601f821115610b6657600081815260208120601f850160051c81016020861015610b435750805b601f850160051c820191505b81811015610b6257828155600101610b4f565b5050505b505050565b815167ffffffffffffffff811115610b8557610b856105ff565b610b9981610b9384546107e1565b84610b1c565b602080601f831160018114610bce5760008415610bb65750858301515b600019600386901b1c1916600185901b178555610b62565b600085815260208120601f198616915b82811015610bfd57888601518255948401946001909101908401610bde565b5085821015610c1b5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6000602080835260008454610c3f816107e1565b80848701526040600180841660008114610c605760018114610c7a57610ca8565b60ff1985168984015283151560051b890183019550610ca8565b896000528660002060005b85811015610ca05781548b8201860152908301908801610c85565b8a0184019650505b50939897505050505050505056fea264697066735822122060c8a0f3f37790185b6faa741c7274ed8ac8bdcd0eb132d11506fa0d158d67f264736f6c63430008140033";

type CommunicatorConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CommunicatorConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Communicator__factory extends ContractFactory {
  constructor(...args: CommunicatorConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Communicator";
  }

  deploy(
    _router: string,
    _link: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Communicator> {
    return super.deploy(
      _router,
      _link,
      overrides || {}
    ) as Promise<Communicator>;
  }
  getDeployTransaction(
    _router: string,
    _link: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_router, _link, overrides || {});
  }
  attach(address: string): Communicator {
    return super.attach(address) as Communicator;
  }
  connect(signer: Signer): Communicator__factory {
    return super.connect(signer) as Communicator__factory;
  }
  static readonly contractName: "Communicator";
  public readonly contractName: "Communicator";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommunicatorInterface {
    return new utils.Interface(_abi) as CommunicatorInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Communicator {
    return new Contract(address, _abi, signerOrProvider) as Communicator;
  }
}
