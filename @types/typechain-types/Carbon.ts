/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface CarbonInterface extends utils.Interface {
  contractName: "Carbon";
  functions: {
    "CARBON_CALCULATOR_ADDRESS()": FunctionFragment;
    "CARBON_CERTIFICATE_ADDRESS()": FunctionFragment;
    "CARBON_COMMUNICATOR_ADDRESS()": FunctionFragment;
    "CARBON_RECEIVER_ADDRESS()": FunctionFragment;
    "EPNS_COMM_ADDRESS()": FunctionFragment;
    "TCO2FaucetExtense()": FunctionFragment;
    "TCO2TokenExtense()": FunctionFragment;
    "TCO2TokensInContract()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "buyCarbonCredits(address,uint256)": FunctionFragment;
    "buyCarbonCreditsCrosschain(address,uint256,address,string,uint64)": FunctionFragment;
    "carbonTokensBurned()": FunctionFragment;
    "carbonTokensBurnedPerUser(address)": FunctionFragment;
    "carbonTokensMinted()": FunctionFragment;
    "decimals()": FunctionFragment;
    "groceryRequests(bytes32)": FunctionFragment;
    "isMumbai()": FunctionFragment;
    "name()": FunctionFragment;
    "offsetCarbonFootprint(bytes32,string,string[],uint256[],address,string)": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retireCarbonCredits(address,uint256,string)": FunctionFragment;
    "retireCarbonCreditsCrosschain(address,uint256,string,address,string,uint64)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferCrosschain(address,uint256,address,string,uint64)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferFromCrosschain(address,address,uint256,address,string,uint64)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "travelRequests(bytes32)": FunctionFragment;
    "websocketBuyCarbonCredits(address,uint256,string)": FunctionFragment;
    "websocketRetireCarbonCredits(address,uint256,string)": FunctionFragment;
    "websocketTransfer(address,address,uint256,string)": FunctionFragment;
    "websocketTransferFrom(address,address,address,uint256,string)": FunctionFragment;
    "withdrawFunds()": FunctionFragment;
    "withdrawTCO2Tokens()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CARBON_CALCULATOR_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CARBON_CERTIFICATE_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CARBON_COMMUNICATOR_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CARBON_RECEIVER_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EPNS_COMM_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TCO2FaucetExtense",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TCO2TokenExtense",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TCO2TokensInContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyCarbonCredits",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyCarbonCreditsCrosschain",
    values: [string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "carbonTokensBurned",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "carbonTokensBurnedPerUser",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "carbonTokensMinted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "groceryRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "isMumbai", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "offsetCarbonFootprint",
    values: [BytesLike, string, string[], BigNumberish[], string, string]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retireCarbonCredits",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "retireCarbonCreditsCrosschain",
    values: [string, BigNumberish, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferCrosschain",
    values: [string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFromCrosschain",
    values: [string, string, BigNumberish, string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "travelRequests",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "websocketBuyCarbonCredits",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "websocketRetireCarbonCredits",
    values: [string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "websocketTransfer",
    values: [string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "websocketTransferFrom",
    values: [string, string, string, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTCO2Tokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CARBON_CALCULATOR_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CARBON_CERTIFICATE_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CARBON_COMMUNICATOR_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CARBON_RECEIVER_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EPNS_COMM_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TCO2FaucetExtense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TCO2TokenExtense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TCO2TokensInContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyCarbonCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "buyCarbonCreditsCrosschain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "carbonTokensBurned",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "carbonTokensBurnedPerUser",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "carbonTokensMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "groceryRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isMumbai", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "offsetCarbonFootprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retireCarbonCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retireCarbonCreditsCrosschain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferCrosschain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferFromCrosschain",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "travelRequests",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "websocketBuyCarbonCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "websocketRetireCarbonCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "websocketTransfer",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "websocketTransferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTCO2Tokens",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BougthCarbonCredits(address,uint256)": EventFragment;
    "BougthCarbonCreditsCrosschain(address,uint256,string)": EventFragment;
    "GroceryCarbonFootprintOffset(bytes32,string,string,string,uint256,uint256,uint256,uint256,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RetiredCarbonCredits(address,uint256,uint256)": EventFragment;
    "RetiredCarbonCreditsCrosschain(address,uint256,string)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
    "TransferCrosschain(address,address,uint256,string)": EventFragment;
    "TransferFromCrosschain(address,address,address,uint256,string)": EventFragment;
    "TravelCarbonFootprintOffset(bytes32,string,string,uint256,uint256,uint256,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BougthCarbonCredits"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "BougthCarbonCreditsCrosschain"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "GroceryCarbonFootprintOffset"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RetiredCarbonCredits"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "RetiredCarbonCreditsCrosschain"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferCrosschain"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "TransferFromCrosschain"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "TravelCarbonFootprintOffset"
  ): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type BougthCarbonCreditsEvent = TypedEvent<
  [string, BigNumber],
  { buyer: string; amount: BigNumber }
>;

export type BougthCarbonCreditsEventFilter =
  TypedEventFilter<BougthCarbonCreditsEvent>;

export type BougthCarbonCreditsCrosschainEvent = TypedEvent<
  [string, BigNumber, string],
  { buyer: string; amount: BigNumber; network: string }
>;

export type BougthCarbonCreditsCrosschainEventFilter =
  TypedEventFilter<BougthCarbonCreditsCrosschainEvent>;

export type GroceryCarbonFootprintOffsetEvent = TypedEvent<
  [
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string
  ],
  {
    requestId: string;
    moneySpentProteins: string;
    moneySpentFats: string;
    moneySpentCarbs: string;
    proteinsEmission: BigNumber;
    fatsEmission: BigNumber;
    carbsEmission: BigNumber;
    foodEmission: BigNumber;
    buyer: string;
  }
>;

export type GroceryCarbonFootprintOffsetEventFilter =
  TypedEventFilter<GroceryCarbonFootprintOffsetEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RetiredCarbonCreditsEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { buyer: string; amount: BigNumber; certificateId: BigNumber }
>;

export type RetiredCarbonCreditsEventFilter =
  TypedEventFilter<RetiredCarbonCreditsEvent>;

export type RetiredCarbonCreditsCrosschainEvent = TypedEvent<
  [string, BigNumber, string],
  { buyer: string; amount: BigNumber; network: string }
>;

export type RetiredCarbonCreditsCrosschainEventFilter =
  TypedEventFilter<RetiredCarbonCreditsCrosschainEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export type TransferCrosschainEvent = TypedEvent<
  [string, string, BigNumber, string],
  { from: string; to: string; amount: BigNumber; network: string }
>;

export type TransferCrosschainEventFilter =
  TypedEventFilter<TransferCrosschainEvent>;

export type TransferFromCrosschainEvent = TypedEvent<
  [string, string, string, BigNumber, string],
  {
    sender: string;
    from: string;
    to: string;
    amount: BigNumber;
    network: string;
  }
>;

export type TransferFromCrosschainEventFilter =
  TypedEventFilter<TransferFromCrosschainEvent>;

export type TravelCarbonFootprintOffsetEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, string],
  {
    requestId: string;
    distance: string;
    nights: string;
    flightEmission: BigNumber;
    hotelEmission: BigNumber;
    travelEmission: BigNumber;
    buyer: string;
  }
>;

export type TravelCarbonFootprintOffsetEventFilter =
  TypedEventFilter<TravelCarbonFootprintOffsetEvent>;

export interface Carbon extends BaseContract {
  contractName: "Carbon";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CarbonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CARBON_CALCULATOR_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    CARBON_CERTIFICATE_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    CARBON_COMMUNICATOR_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    CARBON_RECEIVER_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    EPNS_COMM_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    TCO2FaucetExtense(overrides?: CallOverrides): Promise<[string]>;

    TCO2TokenExtense(overrides?: CallOverrides): Promise<[string]>;

    TCO2TokensInContract(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyCarbonCreditsCrosschain(
      _buyer: string,
      _amount: BigNumberish,
      _receiver: string,
      messageContent: string,
      _destinationChainSelector: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    carbonTokensBurned(overrides?: CallOverrides): Promise<[BigNumber]>;

    carbonTokensBurnedPerUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    carbonTokensMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    groceryRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        moneySpentProteins: string;
        moneySpentFats: string;
        moneySpentCarbs: string;
        proteinsEmission: BigNumber;
        fatsEmission: BigNumber;
        carbsEmission: BigNumber;
        foodEmission: BigNumber;
        buyer: string;
      }
    >;

    isMumbai(overrides?: CallOverrides): Promise<[boolean]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    offsetCarbonFootprint(
      _requestId: BytesLike,
      _flag: string,
      _args: string[],
      _returns: BigNumberish[],
      _buyer: string,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retireCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retireCarbonCreditsCrosschain(
      _buyer: string,
      _amount: BigNumberish,
      _tokenURI: string,
      _receiver: string,
      messageContent: string,
      _destinationChainSelector: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferCrosschain(
      to: string,
      amount: BigNumberish,
      _receiver: string,
      messageContent: string,
      destinationChainSelector: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFromCrosschain(
      from: string,
      to: string,
      amount: BigNumberish,
      _receiver: string,
      messageContent: string,
      destinationChainSelector: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    travelRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, string] & {
        distance: string;
        nights: string;
        flightEmission: BigNumber;
        hotelEmission: BigNumber;
        travelEmission: BigNumber;
        buyer: string;
      }
    >;

    websocketBuyCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    websocketRetireCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    websocketTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    websocketTransferFrom(
      _sender: string,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTCO2Tokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CARBON_CALCULATOR_ADDRESS(overrides?: CallOverrides): Promise<string>;

  CARBON_CERTIFICATE_ADDRESS(overrides?: CallOverrides): Promise<string>;

  CARBON_COMMUNICATOR_ADDRESS(overrides?: CallOverrides): Promise<string>;

  CARBON_RECEIVER_ADDRESS(overrides?: CallOverrides): Promise<string>;

  EPNS_COMM_ADDRESS(overrides?: CallOverrides): Promise<string>;

  TCO2FaucetExtense(overrides?: CallOverrides): Promise<string>;

  TCO2TokenExtense(overrides?: CallOverrides): Promise<string>;

  TCO2TokensInContract(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnFrom(
    account: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyCarbonCredits(
    _buyer: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyCarbonCreditsCrosschain(
    _buyer: string,
    _amount: BigNumberish,
    _receiver: string,
    messageContent: string,
    _destinationChainSelector: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  carbonTokensBurned(overrides?: CallOverrides): Promise<BigNumber>;

  carbonTokensBurnedPerUser(
    arg0: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  carbonTokensMinted(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  groceryRequests(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [
      string,
      string,
      string,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string
    ] & {
      moneySpentProteins: string;
      moneySpentFats: string;
      moneySpentCarbs: string;
      proteinsEmission: BigNumber;
      fatsEmission: BigNumber;
      carbsEmission: BigNumber;
      foodEmission: BigNumber;
      buyer: string;
    }
  >;

  isMumbai(overrides?: CallOverrides): Promise<boolean>;

  name(overrides?: CallOverrides): Promise<string>;

  offsetCarbonFootprint(
    _requestId: BytesLike,
    _flag: string,
    _args: string[],
    _returns: BigNumberish[],
    _buyer: string,
    _tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retireCarbonCredits(
    _buyer: string,
    _amount: BigNumberish,
    _tokenURI: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retireCarbonCreditsCrosschain(
    _buyer: string,
    _amount: BigNumberish,
    _tokenURI: string,
    _receiver: string,
    messageContent: string,
    _destinationChainSelector: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferCrosschain(
    to: string,
    amount: BigNumberish,
    _receiver: string,
    messageContent: string,
    destinationChainSelector: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFromCrosschain(
    from: string,
    to: string,
    amount: BigNumberish,
    _receiver: string,
    messageContent: string,
    destinationChainSelector: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  travelRequests(
    arg0: BytesLike,
    overrides?: CallOverrides
  ): Promise<
    [string, string, BigNumber, BigNumber, BigNumber, string] & {
      distance: string;
      nights: string;
      flightEmission: BigNumber;
      hotelEmission: BigNumber;
      travelEmission: BigNumber;
      buyer: string;
    }
  >;

  websocketBuyCarbonCredits(
    _buyer: string,
    _amount: BigNumberish,
    _network: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  websocketRetireCarbonCredits(
    _buyer: string,
    _amount: BigNumberish,
    _network: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  websocketTransfer(
    _from: string,
    _to: string,
    _amount: BigNumberish,
    _network: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  websocketTransferFrom(
    _sender: string,
    _from: string,
    _to: string,
    _amount: BigNumberish,
    _network: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFunds(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTCO2Tokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CARBON_CALCULATOR_ADDRESS(overrides?: CallOverrides): Promise<string>;

    CARBON_CERTIFICATE_ADDRESS(overrides?: CallOverrides): Promise<string>;

    CARBON_COMMUNICATOR_ADDRESS(overrides?: CallOverrides): Promise<string>;

    CARBON_RECEIVER_ADDRESS(overrides?: CallOverrides): Promise<string>;

    EPNS_COMM_ADDRESS(overrides?: CallOverrides): Promise<string>;

    TCO2FaucetExtense(overrides?: CallOverrides): Promise<string>;

    TCO2TokenExtense(overrides?: CallOverrides): Promise<string>;

    TCO2TokensInContract(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyCarbonCreditsCrosschain(
      _buyer: string,
      _amount: BigNumberish,
      _receiver: string,
      messageContent: string,
      _destinationChainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    carbonTokensBurned(overrides?: CallOverrides): Promise<BigNumber>;

    carbonTokensBurnedPerUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    carbonTokensMinted(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    groceryRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [
        string,
        string,
        string,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string
      ] & {
        moneySpentProteins: string;
        moneySpentFats: string;
        moneySpentCarbs: string;
        proteinsEmission: BigNumber;
        fatsEmission: BigNumber;
        carbsEmission: BigNumber;
        foodEmission: BigNumber;
        buyer: string;
      }
    >;

    isMumbai(overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    offsetCarbonFootprint(
      _requestId: BytesLike,
      _flag: string,
      _args: string[],
      _returns: BigNumberish[],
      _buyer: string,
      _tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retireCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      _tokenURI: string,
      overrides?: CallOverrides
    ): Promise<void>;

    retireCarbonCreditsCrosschain(
      _buyer: string,
      _amount: BigNumberish,
      _tokenURI: string,
      _receiver: string,
      messageContent: string,
      _destinationChainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferCrosschain(
      to: string,
      amount: BigNumberish,
      _receiver: string,
      messageContent: string,
      destinationChainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFromCrosschain(
      from: string,
      to: string,
      amount: BigNumberish,
      _receiver: string,
      messageContent: string,
      destinationChainSelector: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    travelRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<
      [string, string, BigNumber, BigNumber, BigNumber, string] & {
        distance: string;
        nights: string;
        flightEmission: BigNumber;
        hotelEmission: BigNumber;
        travelEmission: BigNumber;
        buyer: string;
      }
    >;

    websocketBuyCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      _network: string,
      overrides?: CallOverrides
    ): Promise<void>;

    websocketRetireCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      _network: string,
      overrides?: CallOverrides
    ): Promise<void>;

    websocketTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _network: string,
      overrides?: CallOverrides
    ): Promise<void>;

    websocketTransferFrom(
      _sender: string,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _network: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFunds(overrides?: CallOverrides): Promise<void>;

    withdrawTCO2Tokens(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "BougthCarbonCredits(address,uint256)"(
      buyer?: string | null,
      amount?: null
    ): BougthCarbonCreditsEventFilter;
    BougthCarbonCredits(
      buyer?: string | null,
      amount?: null
    ): BougthCarbonCreditsEventFilter;

    "BougthCarbonCreditsCrosschain(address,uint256,string)"(
      buyer?: string | null,
      amount?: null,
      network?: null
    ): BougthCarbonCreditsCrosschainEventFilter;
    BougthCarbonCreditsCrosschain(
      buyer?: string | null,
      amount?: null,
      network?: null
    ): BougthCarbonCreditsCrosschainEventFilter;

    "GroceryCarbonFootprintOffset(bytes32,string,string,string,uint256,uint256,uint256,uint256,address)"(
      requestId?: BytesLike | null,
      moneySpentProteins?: null,
      moneySpentFats?: null,
      moneySpentCarbs?: null,
      proteinsEmission?: null,
      fatsEmission?: null,
      carbsEmission?: null,
      foodEmission?: null,
      buyer?: null
    ): GroceryCarbonFootprintOffsetEventFilter;
    GroceryCarbonFootprintOffset(
      requestId?: BytesLike | null,
      moneySpentProteins?: null,
      moneySpentFats?: null,
      moneySpentCarbs?: null,
      proteinsEmission?: null,
      fatsEmission?: null,
      carbsEmission?: null,
      foodEmission?: null,
      buyer?: null
    ): GroceryCarbonFootprintOffsetEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RetiredCarbonCredits(address,uint256,uint256)"(
      buyer?: string | null,
      amount?: null,
      certificateId?: null
    ): RetiredCarbonCreditsEventFilter;
    RetiredCarbonCredits(
      buyer?: string | null,
      amount?: null,
      certificateId?: null
    ): RetiredCarbonCreditsEventFilter;

    "RetiredCarbonCreditsCrosschain(address,uint256,string)"(
      buyer?: string | null,
      amount?: null,
      network?: null
    ): RetiredCarbonCreditsCrosschainEventFilter;
    RetiredCarbonCreditsCrosschain(
      buyer?: string | null,
      amount?: null,
      network?: null
    ): RetiredCarbonCreditsCrosschainEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;

    "TransferCrosschain(address,address,uint256,string)"(
      from?: string | null,
      to?: string | null,
      amount?: null,
      network?: null
    ): TransferCrosschainEventFilter;
    TransferCrosschain(
      from?: string | null,
      to?: string | null,
      amount?: null,
      network?: null
    ): TransferCrosschainEventFilter;

    "TransferFromCrosschain(address,address,address,uint256,string)"(
      sender?: string | null,
      from?: string | null,
      to?: string | null,
      amount?: null,
      network?: null
    ): TransferFromCrosschainEventFilter;
    TransferFromCrosschain(
      sender?: string | null,
      from?: string | null,
      to?: string | null,
      amount?: null,
      network?: null
    ): TransferFromCrosschainEventFilter;

    "TravelCarbonFootprintOffset(bytes32,string,string,uint256,uint256,uint256,address)"(
      requestId?: BytesLike | null,
      distance?: null,
      nights?: null,
      flightEmission?: null,
      hotelEmission?: null,
      travelEmission?: null,
      buyer?: null
    ): TravelCarbonFootprintOffsetEventFilter;
    TravelCarbonFootprintOffset(
      requestId?: BytesLike | null,
      distance?: null,
      nights?: null,
      flightEmission?: null,
      hotelEmission?: null,
      travelEmission?: null,
      buyer?: null
    ): TravelCarbonFootprintOffsetEventFilter;
  };

  estimateGas: {
    CARBON_CALCULATOR_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    CARBON_CERTIFICATE_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    CARBON_COMMUNICATOR_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    CARBON_RECEIVER_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    EPNS_COMM_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    TCO2FaucetExtense(overrides?: CallOverrides): Promise<BigNumber>;

    TCO2TokenExtense(overrides?: CallOverrides): Promise<BigNumber>;

    TCO2TokensInContract(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyCarbonCreditsCrosschain(
      _buyer: string,
      _amount: BigNumberish,
      _receiver: string,
      messageContent: string,
      _destinationChainSelector: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    carbonTokensBurned(overrides?: CallOverrides): Promise<BigNumber>;

    carbonTokensBurnedPerUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    carbonTokensMinted(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    groceryRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isMumbai(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    offsetCarbonFootprint(
      _requestId: BytesLike,
      _flag: string,
      _args: string[],
      _returns: BigNumberish[],
      _buyer: string,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retireCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retireCarbonCreditsCrosschain(
      _buyer: string,
      _amount: BigNumberish,
      _tokenURI: string,
      _receiver: string,
      messageContent: string,
      _destinationChainSelector: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferCrosschain(
      to: string,
      amount: BigNumberish,
      _receiver: string,
      messageContent: string,
      destinationChainSelector: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFromCrosschain(
      from: string,
      to: string,
      amount: BigNumberish,
      _receiver: string,
      messageContent: string,
      destinationChainSelector: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    travelRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    websocketBuyCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    websocketRetireCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    websocketTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    websocketTransferFrom(
      _sender: string,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTCO2Tokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CARBON_CALCULATOR_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CARBON_CERTIFICATE_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CARBON_COMMUNICATOR_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CARBON_RECEIVER_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EPNS_COMM_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TCO2FaucetExtense(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TCO2TokenExtense(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TCO2TokensInContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyCarbonCreditsCrosschain(
      _buyer: string,
      _amount: BigNumberish,
      _receiver: string,
      messageContent: string,
      _destinationChainSelector: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    carbonTokensBurned(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    carbonTokensBurnedPerUser(
      arg0: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    carbonTokensMinted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    groceryRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isMumbai(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    offsetCarbonFootprint(
      _requestId: BytesLike,
      _flag: string,
      _args: string[],
      _returns: BigNumberish[],
      _buyer: string,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retireCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      _tokenURI: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retireCarbonCreditsCrosschain(
      _buyer: string,
      _amount: BigNumberish,
      _tokenURI: string,
      _receiver: string,
      messageContent: string,
      _destinationChainSelector: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferCrosschain(
      to: string,
      amount: BigNumberish,
      _receiver: string,
      messageContent: string,
      destinationChainSelector: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFromCrosschain(
      from: string,
      to: string,
      amount: BigNumberish,
      _receiver: string,
      messageContent: string,
      destinationChainSelector: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    travelRequests(
      arg0: BytesLike,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    websocketBuyCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    websocketRetireCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    websocketTransfer(
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    websocketTransferFrom(
      _sender: string,
      _from: string,
      _to: string,
      _amount: BigNumberish,
      _network: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTCO2Tokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
