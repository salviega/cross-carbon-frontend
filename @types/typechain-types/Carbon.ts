/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export declare namespace Carbon {
  export type TravelStruct = {
    distance: BigNumberish;
    nights: BigNumberish;
    total: BigNumberish;
  };

  export type TravelStructOutput = [BigNumber, BigNumber, BigNumber] & {
    distance: BigNumber;
    nights: BigNumber;
    total: BigNumber;
  };
}

export interface CarbonInterface extends utils.Interface {
  contractName: "Carbon";
  functions: {
    "CARBON_CALCULATOR_ADDRESS()": FunctionFragment;
    "CARBON_CERTIFICATE_ADDRESS()": FunctionFragment;
    "EPNS_COMM_ADDRESS()": FunctionFragment;
    "LINK_TOKEN_ADDRESS()": FunctionFragment;
    "TCO2FaucetExtense()": FunctionFragment;
    "TCO2TokenExtense()": FunctionFragment;
    "TCO2TokensInContract()": FunctionFragment;
    "allowance(address,address)": FunctionFragment;
    "approve(address,uint256)": FunctionFragment;
    "balanceOf(address)": FunctionFragment;
    "burn(uint256)": FunctionFragment;
    "burnFrom(address,uint256)": FunctionFragment;
    "buyCarbonCredits(address,uint256)": FunctionFragment;
    "calculateTravelFootprint(string,bytes,uint8,uint64,string[],bytes[],uint64,uint32,bytes32)": FunctionFragment;
    "carbonTokensMinted()": FunctionFragment;
    "decimals()": FunctionFragment;
    "name()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "retireCarbonCredits(address,uint256)": FunctionFragment;
    "symbol()": FunctionFragment;
    "totalSupply()": FunctionFragment;
    "transfer(address,uint256)": FunctionFragment;
    "transferFrom(address,address,uint256)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "withdrawFunds()": FunctionFragment;
    "withdrawTCO2Tokens()": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "CARBON_CALCULATOR_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "CARBON_CERTIFICATE_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "EPNS_COMM_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "LINK_TOKEN_ADDRESS",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TCO2FaucetExtense",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TCO2TokenExtense",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "TCO2TokensInContract",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "allowance",
    values: [string, string]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "balanceOf", values: [string]): string;
  encodeFunctionData(functionFragment: "burn", values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: "burnFrom",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buyCarbonCredits",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "calculateTravelFootprint",
    values: [
      string,
      BytesLike,
      BigNumberish,
      BigNumberish,
      string[],
      BytesLike[],
      BigNumberish,
      BigNumberish,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "carbonTokensMinted",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "decimals", values?: undefined): string;
  encodeFunctionData(functionFragment: "name", values?: undefined): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "retireCarbonCredits",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "symbol", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "totalSupply",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferFrom",
    values: [string, string, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [string]
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawFunds",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "withdrawTCO2Tokens",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "CARBON_CALCULATOR_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "CARBON_CERTIFICATE_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "EPNS_COMM_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "LINK_TOKEN_ADDRESS",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TCO2FaucetExtense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TCO2TokenExtense",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "TCO2TokensInContract",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "allowance", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "balanceOf", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burn", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "burnFrom", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buyCarbonCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "calculateTravelFootprint",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "carbonTokensMinted",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "decimals", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "name", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "retireCarbonCredits",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "symbol", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "totalSupply",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "transferFrom",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawFunds",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "withdrawTCO2Tokens",
    data: BytesLike
  ): Result;

  events: {
    "Approval(address,address,uint256)": EventFragment;
    "BougthCarbonCredits(address,uint256)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "RetiredCarbonCredits(address,uint256,uint256)": EventFragment;
    "Transfer(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Approval"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BougthCarbonCredits"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RetiredCarbonCredits"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfer"): EventFragment;
}

export type ApprovalEvent = TypedEvent<
  [string, string, BigNumber],
  { owner: string; spender: string; value: BigNumber }
>;

export type ApprovalEventFilter = TypedEventFilter<ApprovalEvent>;

export type BougthCarbonCreditsEvent = TypedEvent<
  [string, BigNumber],
  { buyer: string; amount: BigNumber }
>;

export type BougthCarbonCreditsEventFilter =
  TypedEventFilter<BougthCarbonCreditsEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export type RetiredCarbonCreditsEvent = TypedEvent<
  [string, BigNumber, BigNumber],
  { buyer: string; amount: BigNumber; certificateId: BigNumber }
>;

export type RetiredCarbonCreditsEventFilter =
  TypedEventFilter<RetiredCarbonCreditsEvent>;

export type TransferEvent = TypedEvent<
  [string, string, BigNumber],
  { from: string; to: string; value: BigNumber }
>;

export type TransferEventFilter = TypedEventFilter<TransferEvent>;

export interface Carbon extends BaseContract {
  contractName: "Carbon";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CarbonInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    CARBON_CALCULATOR_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    CARBON_CERTIFICATE_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    EPNS_COMM_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    LINK_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<[string]>;

    TCO2FaucetExtense(overrides?: CallOverrides): Promise<[string]>;

    TCO2TokenExtense(overrides?: CallOverrides): Promise<[string]>;

    TCO2TokensInContract(overrides?: CallOverrides): Promise<[BigNumber]>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    buyCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    calculateTravelFootprint(
      _source: string,
      _encryptedSecretsUrls: BytesLike,
      _donHostedSecretsSlotID: BigNumberish,
      _donHostedSecretsVersion: BigNumberish,
      _args: string[],
      _bytesArgs: BytesLike[],
      _subscriptionId: BigNumberish,
      _gasLimit: BigNumberish,
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    carbonTokensMinted(overrides?: CallOverrides): Promise<[BigNumber]>;

    decimals(overrides?: CallOverrides): Promise<[number]>;

    name(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    retireCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    symbol(overrides?: CallOverrides): Promise<[string]>;

    totalSupply(overrides?: CallOverrides): Promise<[BigNumber]>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    withdrawTCO2Tokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  CARBON_CALCULATOR_ADDRESS(overrides?: CallOverrides): Promise<string>;

  CARBON_CERTIFICATE_ADDRESS(overrides?: CallOverrides): Promise<string>;

  EPNS_COMM_ADDRESS(overrides?: CallOverrides): Promise<string>;

  LINK_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

  TCO2FaucetExtense(overrides?: CallOverrides): Promise<string>;

  TCO2TokenExtense(overrides?: CallOverrides): Promise<string>;

  TCO2TokensInContract(overrides?: CallOverrides): Promise<BigNumber>;

  allowance(
    owner: string,
    spender: string,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  approve(
    spender: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

  burn(
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  burnFrom(
    account: string,
    value: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  buyCarbonCredits(
    _buyer: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  calculateTravelFootprint(
    _source: string,
    _encryptedSecretsUrls: BytesLike,
    _donHostedSecretsSlotID: BigNumberish,
    _donHostedSecretsVersion: BigNumberish,
    _args: string[],
    _bytesArgs: BytesLike[],
    _subscriptionId: BigNumberish,
    _gasLimit: BigNumberish,
    _jobId: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  carbonTokensMinted(overrides?: CallOverrides): Promise<BigNumber>;

  decimals(overrides?: CallOverrides): Promise<number>;

  name(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  retireCarbonCredits(
    _buyer: string,
    _amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  symbol(overrides?: CallOverrides): Promise<string>;

  totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

  transfer(
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferFrom(
    from: string,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawFunds(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  withdrawTCO2Tokens(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    CARBON_CALCULATOR_ADDRESS(overrides?: CallOverrides): Promise<string>;

    CARBON_CERTIFICATE_ADDRESS(overrides?: CallOverrides): Promise<string>;

    EPNS_COMM_ADDRESS(overrides?: CallOverrides): Promise<string>;

    LINK_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<string>;

    TCO2FaucetExtense(overrides?: CallOverrides): Promise<string>;

    TCO2TokenExtense(overrides?: CallOverrides): Promise<string>;

    TCO2TokensInContract(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(value: BigNumberish, overrides?: CallOverrides): Promise<void>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    buyCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    calculateTravelFootprint(
      _source: string,
      _encryptedSecretsUrls: BytesLike,
      _donHostedSecretsSlotID: BigNumberish,
      _donHostedSecretsVersion: BigNumberish,
      _args: string[],
      _bytesArgs: BytesLike[],
      _subscriptionId: BigNumberish,
      _gasLimit: BigNumberish,
      _jobId: BytesLike,
      overrides?: CallOverrides
    ): Promise<Carbon.TravelStructOutput>;

    carbonTokensMinted(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<number>;

    name(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    retireCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<void>;

    symbol(overrides?: CallOverrides): Promise<string>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transferOwnership(
      newOwner: string,
      overrides?: CallOverrides
    ): Promise<void>;

    withdrawFunds(overrides?: CallOverrides): Promise<void>;

    withdrawTCO2Tokens(overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    "Approval(address,address,uint256)"(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;
    Approval(
      owner?: string | null,
      spender?: string | null,
      value?: null
    ): ApprovalEventFilter;

    "BougthCarbonCredits(address,uint256)"(
      buyer?: string | null,
      amount?: null
    ): BougthCarbonCreditsEventFilter;
    BougthCarbonCredits(
      buyer?: string | null,
      amount?: null
    ): BougthCarbonCreditsEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null
    ): OwnershipTransferredEventFilter;

    "RetiredCarbonCredits(address,uint256,uint256)"(
      buyer?: string | null,
      amount?: null,
      certificateId?: null
    ): RetiredCarbonCreditsEventFilter;
    RetiredCarbonCredits(
      buyer?: string | null,
      amount?: null,
      certificateId?: null
    ): RetiredCarbonCreditsEventFilter;

    "Transfer(address,address,uint256)"(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
    Transfer(
      from?: string | null,
      to?: string | null,
      value?: null
    ): TransferEventFilter;
  };

  estimateGas: {
    CARBON_CALCULATOR_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    CARBON_CERTIFICATE_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    EPNS_COMM_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    LINK_TOKEN_ADDRESS(overrides?: CallOverrides): Promise<BigNumber>;

    TCO2FaucetExtense(overrides?: CallOverrides): Promise<BigNumber>;

    TCO2TokenExtense(overrides?: CallOverrides): Promise<BigNumber>;

    TCO2TokensInContract(overrides?: CallOverrides): Promise<BigNumber>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    balanceOf(account: string, overrides?: CallOverrides): Promise<BigNumber>;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    buyCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    calculateTravelFootprint(
      _source: string,
      _encryptedSecretsUrls: BytesLike,
      _donHostedSecretsSlotID: BigNumberish,
      _donHostedSecretsVersion: BigNumberish,
      _args: string[],
      _bytesArgs: BytesLike[],
      _subscriptionId: BigNumberish,
      _gasLimit: BigNumberish,
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    carbonTokensMinted(overrides?: CallOverrides): Promise<BigNumber>;

    decimals(overrides?: CallOverrides): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    retireCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    symbol(overrides?: CallOverrides): Promise<BigNumber>;

    totalSupply(overrides?: CallOverrides): Promise<BigNumber>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    withdrawTCO2Tokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    CARBON_CALCULATOR_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    CARBON_CERTIFICATE_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    EPNS_COMM_ADDRESS(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    LINK_TOKEN_ADDRESS(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    TCO2FaucetExtense(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TCO2TokenExtense(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    TCO2TokensInContract(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    allowance(
      owner: string,
      spender: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    approve(
      spender: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    balanceOf(
      account: string,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    burn(
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    burnFrom(
      account: string,
      value: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    buyCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    calculateTravelFootprint(
      _source: string,
      _encryptedSecretsUrls: BytesLike,
      _donHostedSecretsSlotID: BigNumberish,
      _donHostedSecretsVersion: BigNumberish,
      _args: string[],
      _bytesArgs: BytesLike[],
      _subscriptionId: BigNumberish,
      _gasLimit: BigNumberish,
      _jobId: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    carbonTokensMinted(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    decimals(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    retireCarbonCredits(
      _buyer: string,
      _amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    symbol(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    totalSupply(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transfer(
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferFrom(
      from: string,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawFunds(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    withdrawTCO2Tokens(
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
