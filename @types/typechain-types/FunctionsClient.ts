/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result, EventFragment } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface FunctionsClientInterface extends utils.Interface {
  contractName: "FunctionsClient";
  functions: {
    "handleOracleFulfillment(bytes32,bytes,bytes)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "handleOracleFulfillment",
    values: [BytesLike, BytesLike, BytesLike]
  ): string;

  decodeFunctionResult(
    functionFragment: "handleOracleFulfillment",
    data: BytesLike
  ): Result;

  events: {
    "RequestFulfilled(bytes32)": EventFragment;
    "RequestSent(bytes32)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "RequestFulfilled"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RequestSent"): EventFragment;
}

export type RequestFulfilledEvent = TypedEvent<[string], { id: string }>;

export type RequestFulfilledEventFilter =
  TypedEventFilter<RequestFulfilledEvent>;

export type RequestSentEvent = TypedEvent<[string], { id: string }>;

export type RequestSentEventFilter = TypedEventFilter<RequestSentEvent>;

export interface FunctionsClient extends BaseContract {
  contractName: "FunctionsClient";
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: FunctionsClientInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    handleOracleFulfillment(
      requestId: BytesLike,
      response: BytesLike,
      err: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  handleOracleFulfillment(
    requestId: BytesLike,
    response: BytesLike,
    err: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    handleOracleFulfillment(
      requestId: BytesLike,
      response: BytesLike,
      err: BytesLike,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "RequestFulfilled(bytes32)"(
      id?: BytesLike | null
    ): RequestFulfilledEventFilter;
    RequestFulfilled(id?: BytesLike | null): RequestFulfilledEventFilter;

    "RequestSent(bytes32)"(id?: BytesLike | null): RequestSentEventFilter;
    RequestSent(id?: BytesLike | null): RequestSentEventFilter;
  };

  estimateGas: {
    handleOracleFulfillment(
      requestId: BytesLike,
      response: BytesLike,
      err: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    handleOracleFulfillment(
      requestId: BytesLike,
      response: BytesLike,
      err: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
