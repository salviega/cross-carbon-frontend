{
  "address": "0x81a5A46ce2fE868404BD43c7876B1187CF3C0341",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_TCO2Faucet",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_TCO2Token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_EPNS_COMM_ADDRESS",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_LINK_TOKEN_ADDRESS",
          "type": "address"
        },
        {
          "internalType": "string[]",
          "name": "_certificateArgs",
          "type": "string[]"
        },
        {
          "internalType": "address[]",
          "name": "_calculatorArgs",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "allowance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientAllowance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "balance",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "needed",
          "type": "uint256"
        }
      ],
      "name": "ERC20InsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidApprover",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidReceiver",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "ERC20InvalidSpender",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "StringsInsufficientHexLength",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BougthCarbonCredits",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "buyer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "certificateId",
          "type": "uint256"
        }
      ],
      "name": "RetiredCarbonCredits",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "CARBON_CALCULATOR_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "CARBON_CERTIFICATE_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "EPNS_COMM_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LINK_TOKEN_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TCO2FaucetExtense",
      "outputs": [
        {
          "internalType": "contract ITCO2Faucet",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TCO2TokenExtense",
      "outputs": [
        {
          "internalType": "contract ITCO2Token",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TCO2TokensInContract",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "allowance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "value",
          "type": "uint256"
        }
      ],
      "name": "burnFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "buyCarbonCredits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "_source",
          "type": "string"
        },
        {
          "internalType": "bytes",
          "name": "_encryptedSecretsUrls",
          "type": "bytes"
        },
        {
          "internalType": "uint8",
          "name": "_donHostedSecretsSlotID",
          "type": "uint8"
        },
        {
          "internalType": "uint64",
          "name": "_donHostedSecretsVersion",
          "type": "uint64"
        },
        {
          "internalType": "string[]",
          "name": "_args",
          "type": "string[]"
        },
        {
          "internalType": "bytes[]",
          "name": "_bytesArgs",
          "type": "bytes[]"
        },
        {
          "internalType": "uint64",
          "name": "_subscriptionId",
          "type": "uint64"
        },
        {
          "internalType": "uint32",
          "name": "_gasLimit",
          "type": "uint32"
        },
        {
          "internalType": "bytes32",
          "name": "_jobId",
          "type": "bytes32"
        }
      ],
      "name": "calculateTravelFootprint",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "distance",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nights",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "total",
              "type": "uint256"
            }
          ],
          "internalType": "struct Carbon.Travel",
          "name": "carbonFootprintTravel",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "carbonTokensMinted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "decimals",
      "outputs": [
        {
          "internalType": "uint8",
          "name": "",
          "type": "uint8"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_buyer",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "retireCarbonCredits",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transfer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFunds",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawTCO2Tokens",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x8f60a1594b219e1d1f018ff1cc51c732b5039d21d5af95e189ce9b2dce8ecaf9",
  "receipt": {
    "to": null,
    "from": "0xaA7880DB88D8e051428b5204817e58D8327340De",
    "contractAddress": "0x81a5A46ce2fE868404BD43c7876B1187CF3C0341",
    "transactionIndex": 0,
    "gasUsed": "4620657",
    "logsBloom": "0x000100000000000400000040000000000001000000000000008000000000000200000000000000000000000000000000000080004020000000000000002000000000000000000000000000000000008000010000000000000c0100000000000000000000020000020000000000000800000000000000000080000000000000400000000000000000000000000000020000000000000000000000000000108000220000000000000000000000000000000000000000000000000040000000004040000000000000000001000000000000000000000008000000100000000120000810000000000000001000000000010000000000000000000000000000100000",
    "blockHash": "0x8baeb130c2c63e98868dc56f1d9276e7dcc295bc95bf47585963c736de6145f2",
    "transactionHash": "0x8f60a1594b219e1d1f018ff1cc51c732b5039d21d5af95e189ce9b2dce8ecaf9",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 41170367,
        "transactionHash": "0x8f60a1594b219e1d1f018ff1cc51c732b5039d21d5af95e189ce9b2dce8ecaf9",
        "address": "0x81a5A46ce2fE868404BD43c7876B1187CF3C0341",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000aa7880db88d8e051428b5204817e58d8327340de"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x8baeb130c2c63e98868dc56f1d9276e7dcc295bc95bf47585963c736de6145f2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 41170367,
        "transactionHash": "0x8f60a1594b219e1d1f018ff1cc51c732b5039d21d5af95e189ce9b2dce8ecaf9",
        "address": "0x35c3259F328f3B97f55e0C9cf1A40cB4f7100f7F",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000081a5a46ce2fe868404bd43c7876b1187cf3c0341"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0x8baeb130c2c63e98868dc56f1d9276e7dcc295bc95bf47585963c736de6145f2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 41170367,
        "transactionHash": "0x8f60a1594b219e1d1f018ff1cc51c732b5039d21d5af95e189ce9b2dce8ecaf9",
        "address": "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
        "topics": [
          "0x8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925",
          "0x00000000000000000000000081a5a46ce2fe868404bd43c7876b1187cf3c0341",
          "0x000000000000000000000000d8bd44af93dcf7c351fb6d4af0f96da2f42099d0"
        ],
        "data": "0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff",
        "logIndex": 2,
        "blockHash": "0x8baeb130c2c63e98868dc56f1d9276e7dcc295bc95bf47585963c736de6145f2"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 41170367,
        "transactionHash": "0x8f60a1594b219e1d1f018ff1cc51c732b5039d21d5af95e189ce9b2dce8ecaf9",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000aa7880db88d8e051428b5204817e58d8327340de",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000a428a16abb8cf000000000000000000000000000000000000000000000000004320eedad4dd4bf0000000000000000000000000000000000000000000013375b39546021e34592000000000000000000000000000000000000000000000000038de64c429247cf0000000000000000000000000000000000000000000013375bdd7d018c9ed282",
        "logIndex": 3,
        "blockHash": "0x8baeb130c2c63e98868dc56f1d9276e7dcc295bc95bf47585963c736de6145f2"
      }
    ],
    "blockNumber": 41170367,
    "cumulativeGasUsed": "4620657",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x996b39698CF96A70B7a7005B5d1924a66C5E8f0e",
    "0xa5831eb637dff307395b5183c86B04c69C518681",
    "0xb3971BCef2D791bc4027BbfedFb47319A4AAaaAa",
    "0x326C977E6efc84E512bB9C30f76E30c160eD06FB",
    [
      "Certificate",
      "CERT",
      "https://api.carbon.fyi/certificate/"
    ],
    [
      "0x6E2dc0F9DB014aE19888F539E59285D2Ea04244C"
    ]
  ],
  "numDeployments": 7,
  "solcInputHash": "e866b7640ca9fe46bb5dc64239443654",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_TCO2Faucet\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_TCO2Token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_EPNS_COMM_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_LINK_TOKEN_ADDRESS\",\"type\":\"address\"},{\"internalType\":\"string[]\",\"name\":\"_certificateArgs\",\"type\":\"string[]\"},{\"internalType\":\"address[]\",\"name\":\"_calculatorArgs\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"allowance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientAllowance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"balance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"needed\",\"type\":\"uint256\"}],\"name\":\"ERC20InsufficientBalance\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidApprover\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"}],\"name\":\"ERC20InvalidReceiver\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"ERC20InvalidSpender\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"StringsInsufficientHexLength\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BougthCarbonCredits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"buyer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"certificateId\",\"type\":\"uint256\"}],\"name\":\"RetiredCarbonCredits\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"CARBON_CALCULATOR_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"CARBON_CERTIFICATE_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"EPNS_COMM_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LINK_TOKEN_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TCO2FaucetExtense\",\"outputs\":[{\"internalType\":\"contract ITCO2Faucet\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TCO2TokenExtense\",\"outputs\":[{\"internalType\":\"contract ITCO2Token\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TCO2TokensInContract\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"allowance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"}],\"name\":\"burnFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"buyCarbonCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_source\",\"type\":\"string\"},{\"internalType\":\"bytes\",\"name\":\"_encryptedSecretsUrls\",\"type\":\"bytes\"},{\"internalType\":\"uint8\",\"name\":\"_donHostedSecretsSlotID\",\"type\":\"uint8\"},{\"internalType\":\"uint64\",\"name\":\"_donHostedSecretsVersion\",\"type\":\"uint64\"},{\"internalType\":\"string[]\",\"name\":\"_args\",\"type\":\"string[]\"},{\"internalType\":\"bytes[]\",\"name\":\"_bytesArgs\",\"type\":\"bytes[]\"},{\"internalType\":\"uint64\",\"name\":\"_subscriptionId\",\"type\":\"uint64\"},{\"internalType\":\"uint32\",\"name\":\"_gasLimit\",\"type\":\"uint32\"},{\"internalType\":\"bytes32\",\"name\":\"_jobId\",\"type\":\"bytes32\"}],\"name\":\"calculateTravelFootprint\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"distance\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nights\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"total\",\"type\":\"uint256\"}],\"internalType\":\"struct Carbon.Travel\",\"name\":\"carbonFootprintTravel\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"carbonTokensMinted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"decimals\",\"outputs\":[{\"internalType\":\"uint8\",\"name\":\"\",\"type\":\"uint8\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_buyer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"retireCarbonCredits\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transfer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFunds\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawTCO2Tokens\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"errors\":{\"ERC20InsufficientAllowance(address,uint256,uint256)\":[{\"details\":\"Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\",\"params\":{\"allowance\":\"Amount of tokens a `spender` is allowed to operate with.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"ERC20InsufficientBalance(address,uint256,uint256)\":[{\"details\":\"Indicates an error related to the current `balance` of a `sender`. Used in transfers.\",\"params\":{\"balance\":\"Current balance for the interacting account.\",\"needed\":\"Minimum amount required to perform a transfer.\",\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidApprover(address)\":[{\"details\":\"Indicates a failure with the `approver` of a token to be approved. Used in approvals.\",\"params\":{\"approver\":\"Address initiating an approval operation.\"}}],\"ERC20InvalidReceiver(address)\":[{\"details\":\"Indicates a failure with the token `receiver`. Used in transfers.\",\"params\":{\"receiver\":\"Address to which tokens are being transferred.\"}}],\"ERC20InvalidSender(address)\":[{\"details\":\"Indicates a failure with the token `sender`. Used in transfers.\",\"params\":{\"sender\":\"Address whose tokens are being transferred.\"}}],\"ERC20InvalidSpender(address)\":[{\"details\":\"Indicates a failure with the `spender` to be approved. Used in approvals.\",\"params\":{\"spender\":\"Address that may be allowed to operate on tokens without being their owner.\"}}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"StringsInsufficientHexLength(uint256,uint256)\":[{\"details\":\"The `value` string doesn't fit in the specified `length`.\"}]},\"events\":{\"Approval(address,address,uint256)\":{\"details\":\"Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance.\"},\"Transfer(address,address,uint256)\":{\"details\":\"Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero.\"}},\"kind\":\"dev\",\"methods\":{\"allowance(address,address)\":{\"details\":\"See {IERC20-allowance}.\"},\"approve(address,uint256)\":{\"details\":\"See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address.\"},\"balanceOf(address)\":{\"details\":\"See {IERC20-balanceOf}.\"},\"burn(uint256)\":{\"details\":\"Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}.\"},\"burnFrom(address,uint256)\":{\"details\":\"Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`.\"},\"decimals()\":{\"details\":\"Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}.\"},\"name()\":{\"details\":\"Returns the name of the token.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"symbol()\":{\"details\":\"Returns the symbol of the token, usually a shorter version of the name.\"},\"totalSupply()\":{\"details\":\"See {IERC20-totalSupply}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Carbon.sol\":\"Carbon\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsRouter} from \\\"./interfaces/IFunctionsRouter.sol\\\";\\nimport {IFunctionsClient} from \\\"./interfaces/IFunctionsClient.sol\\\";\\n\\nimport {FunctionsRequest} from \\\"./libraries/FunctionsRequest.sol\\\";\\n\\n/// @title The Chainlink Functions client contract\\n/// @notice Contract developers can inherit this contract in order to make Chainlink Functions requests\\nabstract contract FunctionsClient is IFunctionsClient {\\n  using FunctionsRequest for FunctionsRequest.Request;\\n\\n  IFunctionsRouter internal immutable i_router;\\n\\n  event RequestSent(bytes32 indexed id);\\n  event RequestFulfilled(bytes32 indexed id);\\n\\n  error OnlyRouterCanFulfill();\\n\\n  constructor(address router) {\\n    i_router = IFunctionsRouter(router);\\n  }\\n\\n  /// @notice Sends a Chainlink Functions request\\n  /// @param data The CBOR encoded bytes data for a Functions request\\n  /// @param subscriptionId The subscription ID that will be charged to service the request\\n  /// @param callbackGasLimit the amount of gas that will be available for the fulfillment callback\\n  /// @return requestId The generated request ID for this request\\n  function _sendRequest(\\n    bytes memory data,\\n    uint64 subscriptionId,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) internal returns (bytes32) {\\n    bytes32 requestId = i_router.sendRequest(\\n      subscriptionId,\\n      data,\\n      FunctionsRequest.REQUEST_DATA_VERSION,\\n      callbackGasLimit,\\n      donId\\n    );\\n    emit RequestSent(requestId);\\n    return requestId;\\n  }\\n\\n  /// @notice User defined function to handle a response from the DON\\n  /// @param requestId The request ID, returned by sendRequest()\\n  /// @param response Aggregated response from the execution of the user's source code\\n  /// @param err Aggregated error from the execution of the user code or from the execution pipeline\\n  /// @dev Either response or error parameter will be set, but never both\\n  function fulfillRequest(bytes32 requestId, bytes memory response, bytes memory err) internal virtual;\\n\\n  /// @inheritdoc IFunctionsClient\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external override {\\n    if (msg.sender != address(i_router)) {\\n      revert OnlyRouterCanFulfill();\\n    }\\n    fulfillRequest(requestId, response, err);\\n    emit RequestFulfilled(requestId);\\n  }\\n}\\n\",\"keccak256\":\"0x40224641403cb9fa03d4f060296d7420a9ff11b46abadc958ae048459205e397\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsClient.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/// @title Chainlink Functions client interface.\\ninterface IFunctionsClient {\\n  /// @notice Chainlink Functions response handler called by the Functions Router\\n  /// during fullilment from the designated transmitter node in an OCR round.\\n  /// @param requestId The requestId returned by FunctionsClient.sendRequest().\\n  /// @param response Aggregated response from the request's source code.\\n  /// @param err Aggregated error either from the request's source code or from the execution pipeline.\\n  /// @dev Either response or error parameter will be set, but never both.\\n  function handleOracleFulfillment(bytes32 requestId, bytes memory response, bytes memory err) external;\\n}\\n\",\"keccak256\":\"0x6117b82e7c4eec44ce557b0fc8bc1ac5f49e5d160ac6d4485452d6aafdd762ff\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsRouter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Router interface.\\ninterface IFunctionsRouter {\\n  /// @notice The identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  /// @return id - bytes32 id that can be passed to the \\\"getContractById\\\" of the Router\\n  function getAllowListId() external view returns (bytes32);\\n\\n  /// @notice Set the identifier of the route to retrieve the address of the access control contract\\n  /// The access control contract controls which accounts can manage subscriptions\\n  function setAllowListId(bytes32 allowListId) external;\\n\\n  /// @notice Get the flat fee (in Juels of LINK) that will be paid to the Router owner for operation of the network\\n  /// @return adminFee\\n  function getAdminFee() external view returns (uint72 adminFee);\\n\\n  /// @notice Sends a request using the provided subscriptionId\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequest(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Sends a request to the proposed contracts\\n  /// @param subscriptionId - A unique subscription ID allocated by billing system,\\n  /// a client can make requests from different contracts referencing the same subscription\\n  /// @param data - CBOR encoded Chainlink Functions request data, use FunctionsClient API to encode a request\\n  /// @param dataVersion - Gas limit for the fulfillment callback\\n  /// @param callbackGasLimit - Gas limit for the fulfillment callback\\n  /// @param donId - An identifier used to determine which route to send the request along\\n  /// @return requestId - A unique request identifier\\n  function sendRequestToProposed(\\n    uint64 subscriptionId,\\n    bytes calldata data,\\n    uint16 dataVersion,\\n    uint32 callbackGasLimit,\\n    bytes32 donId\\n  ) external returns (bytes32);\\n\\n  /// @notice Fulfill the request by:\\n  /// - calling back the data that the Oracle returned to the client contract\\n  /// - pay the DON for processing the request\\n  /// @dev Only callable by the Coordinator contract that is saved in the commitment\\n  /// @param response response data from DON consensus\\n  /// @param err error from DON consensus\\n  /// @param juelsPerGas - current rate of juels/gas\\n  /// @param costWithoutFulfillment - The cost of processing the request (in Juels of LINK ), without fulfillment\\n  /// @param transmitter - The Node that transmitted the OCR report\\n  /// @param commitment - The parameters of the request that must be held consistent between request and response time\\n  /// @return fulfillResult -\\n  /// @return callbackGasCostJuels -\\n  function fulfill(\\n    bytes memory response,\\n    bytes memory err,\\n    uint96 juelsPerGas,\\n    uint96 costWithoutFulfillment,\\n    address transmitter,\\n    FunctionsResponse.Commitment memory commitment\\n  ) external returns (FunctionsResponse.FulfillResult, uint96);\\n\\n  /// @notice Validate requested gas limit is below the subscription max.\\n  /// @param subscriptionId subscription ID\\n  /// @param callbackGasLimit desired callback gas limit\\n  function isValidCallbackGasLimit(uint64 subscriptionId, uint32 callbackGasLimit) external view;\\n\\n  /// @notice Get the current contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current contract address\\n  function getContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Get the proposed next contract given an ID\\n  /// @param id A bytes32 identifier for the route\\n  /// @return contract The current or proposed contract address\\n  function getProposedContractById(bytes32 id) external view returns (address);\\n\\n  /// @notice Return the latest proprosal set\\n  /// @return ids The identifiers of the contracts to update\\n  /// @return to The addresses of the contracts that will be updated to\\n  function getProposedContractSet() external view returns (bytes32[] memory, address[] memory);\\n\\n  /// @notice Proposes one or more updates to the contract routes\\n  /// @dev Only callable by owner\\n  function proposeContractsUpdate(bytes32[] memory proposalSetIds, address[] memory proposalSetAddresses) external;\\n\\n  /// @notice Updates the current contract routes to the proposed contracts\\n  /// @dev Only callable by owner\\n  function updateContracts() external;\\n\\n  /// @dev Puts the system into an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function pause() external;\\n\\n  /// @dev Takes the system out of an emergency stopped state.\\n  /// @dev Only callable by owner\\n  function unpause() external;\\n}\\n\",\"keccak256\":\"0x44db41e8ff90c2828ca0ada125abc4b411921a86514a4a047fd9fd43ba9d7e08\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/interfaces/IFunctionsSubscriptions.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsResponse} from \\\"../libraries/FunctionsResponse.sol\\\";\\n\\n/// @title Chainlink Functions Subscription interface.\\ninterface IFunctionsSubscriptions {\\n  struct Subscription {\\n    uint96 balance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Common LINK balance that is controlled by the Router to be used for all consumer requests.\\n    address owner; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The owner can fund/withdraw/cancel the subscription.\\n    uint96 blockedBalance; // \\u2550\\u2550\\u2557 LINK balance that is reserved to pay for pending consumer requests.\\n    address proposedOwner; // \\u2550\\u2550\\u255d For safely transferring sub ownership.\\n    address[] consumers; // \\u2550\\u2550\\u2550\\u2550\\u2578 Client contracts that can use the subscription\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n  }\\n\\n  struct Consumer {\\n    bool allowed; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Owner can fund/withdraw/cancel the sub.\\n    uint64 initiatedRequests; //   \\u2551 The number of requests that have been started\\n    uint64 completedRequests; // \\u2550\\u2550\\u255d The number of requests that have successfully completed or timed out\\n  }\\n\\n  /// @notice Get details about a subscription.\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return subscription - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscription(uint64 subscriptionId) external view returns (Subscription memory);\\n\\n  /// @notice Retrieve details about multiple subscriptions using an inclusive range\\n  /// @param subscriptionIdStart - the ID of the subscription to start the range at\\n  /// @param subscriptionIdEnd - the ID of the subscription to end the range at\\n  /// @return subscriptions - see IFunctionsSubscriptions.Subscription for more information on the structure\\n  function getSubscriptionsInRange(\\n    uint64 subscriptionIdStart,\\n    uint64 subscriptionIdEnd\\n  ) external view returns (Subscription[] memory);\\n\\n  /// @notice Get details about a consumer of a subscription.\\n  /// @param client - the consumer contract address\\n  /// @param subscriptionId - the ID of the subscription\\n  /// @return consumer - see IFunctionsSubscriptions.Consumer for more information on the structure\\n  function getConsumer(address client, uint64 subscriptionId) external view returns (Consumer memory);\\n\\n  /// @notice Get details about the total amount of LINK within the system\\n  /// @return totalBalance - total Juels of LINK held by the contract\\n  function getTotalBalance() external view returns (uint96);\\n\\n  /// @notice Get details about the total number of subscription accounts\\n  /// @return count - total number of subscriptions in the system\\n  function getSubscriptionCount() external view returns (uint64);\\n\\n  /// @notice Time out all expired requests: unlocks funds and removes the ability for the request to be fulfilled\\n  /// @param requestsToTimeoutByCommitment - A list of request commitments to time out\\n  /// @dev The commitment can be found on the \\\"OracleRequest\\\" event created when sending the request.\\n  function timeoutRequests(FunctionsResponse.Commitment[] calldata requestsToTimeoutByCommitment) external;\\n\\n  /// @notice Oracle withdraw LINK earned through fulfilling requests\\n  /// @notice If amount is 0 the full balance will be withdrawn\\n  /// @notice Both signing and transmitting wallets will have a balance to withdraw\\n  /// @param recipient where to send the funds\\n  /// @param amount amount to withdraw\\n  function oracleWithdraw(address recipient, uint96 amount) external;\\n\\n  /// @notice Owner cancel subscription, sends remaining link directly to the subscription owner.\\n  /// @dev Only callable by the Router Owner\\n  /// @param subscriptionId subscription id\\n  /// @dev notably can be called even if there are pending requests, outstanding ones may fail onchain\\n  function ownerCancelSubscription(uint64 subscriptionId) external;\\n\\n  /// @notice Recover link sent with transfer instead of transferAndCall.\\n  /// @dev Only callable by the Router Owner\\n  /// @param to address to send link to\\n  function recoverFunds(address to) external;\\n\\n  /// @notice Create a new subscription.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscription() external returns (uint64);\\n\\n  /// @notice Create a new subscription and add a consumer.\\n  /// @return subscriptionId - A unique subscription id.\\n  /// @dev You can manage the consumer set dynamically with addConsumer/removeConsumer.\\n  /// @dev Note to fund the subscription, use transferAndCall. For example\\n  /// @dev  LINKTOKEN.transferAndCall(\\n  /// @dev    address(ROUTER),\\n  /// @dev    amount,\\n  /// @dev    abi.encode(subscriptionId));\\n  function createSubscriptionWithConsumer(address consumer) external returns (uint64 subscriptionId);\\n\\n  /// @notice Propose a new owner for a subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param newOwner - proposed new owner of the subscription\\n  function proposeSubscriptionOwnerTransfer(uint64 subscriptionId, address newOwner) external;\\n\\n  /// @notice Accept an ownership transfer.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @dev will revert if original owner of subscriptionId has not requested that msg.sender become the new owner.\\n  function acceptSubscriptionOwnerTransfer(uint64 subscriptionId) external;\\n\\n  /// @notice Remove a consumer from a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - Consumer to remove from the subscription\\n  function removeConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Add a consumer to a Chainlink Functions subscription.\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param consumer - New consumer which can use the subscription\\n  function addConsumer(uint64 subscriptionId, address consumer) external;\\n\\n  /// @notice Cancel a subscription\\n  /// @dev Only callable by the Subscription's owner\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param to - Where to send the remaining LINK to\\n  function cancelSubscription(uint64 subscriptionId, address to) external;\\n\\n  /// @notice Check to see if there exists a request commitment for all consumers for a given sub.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return true if there exists at least one unfulfilled request for the subscription, false otherwise.\\n  /// @dev Looping is bounded to MAX_CONSUMERS*(number of DONs).\\n  /// @dev Used to disable subscription canceling while outstanding request are present.\\n  function pendingRequestExists(uint64 subscriptionId) external view returns (bool);\\n\\n  /// @notice Set subscription specific flags for a subscription.\\n  /// Each byte of the flag is used to represent a resource tier that the subscription can utilize.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @param flags - desired flag values\\n  function setFlags(uint64 subscriptionId, bytes32 flags) external;\\n\\n  /// @notice Get flags for a given subscription.\\n  /// @param subscriptionId - ID of the subscription\\n  /// @return flags - current flag values\\n  function getFlags(uint64 subscriptionId) external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xab83613f1bb1cbdbf15fdbb6382259e2b2678bfe5a3a6dab976cdf2337f1f94e\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {CBOR} from \\\"../../../../vendor/solidity-cborutils/v2.0.0/CBOR.sol\\\";\\n\\n/// @title Library for encoding the input data of a Functions request into CBOR\\nlibrary FunctionsRequest {\\n  using CBOR for CBOR.CBORBuffer;\\n\\n  uint16 public constant REQUEST_DATA_VERSION = 1;\\n  uint256 internal constant DEFAULT_BUFFER_SIZE = 256;\\n\\n  enum Location {\\n    Inline, // Provided within the Request\\n    Remote, // Hosted through remote location that can be accessed through a provided URL\\n    DONHosted // Hosted on the DON's storage\\n  }\\n\\n  enum CodeLanguage {\\n    JavaScript\\n    // In future version we may add other languages\\n  }\\n\\n  struct Request {\\n    Location codeLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of the source code that will be executed on each node in the DON\\n    Location secretsLocation; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The location of secrets that will be passed into the source code. *Only Remote secrets are supported\\n    CodeLanguage language; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 The coding language that the source code is written in\\n    string source; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Raw source code for Request.codeLocation of Location.Inline, URL for Request.codeLocation of Location.Remote, or slot decimal number for Request.codeLocation of Location.DONHosted\\n    bytes encryptedSecretsReference; // \\u2550\\u2550\\u2578 Encrypted URLs for Request.secretsLocation of Location.Remote (use addSecretsReference()), or CBOR encoded slotid+version for Request.secretsLocation of Location.DONHosted (use addDONHostedSecrets())\\n    string[] args; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 String arguments that will be passed into the source code\\n    bytes[] bytesArgs; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Bytes arguments that will be passed into the source code\\n  }\\n\\n  error EmptySource();\\n  error EmptySecrets();\\n  error EmptyArgs();\\n  error NoInlineSecrets();\\n\\n  /// @notice Encodes a Request to CBOR encoded bytes\\n  /// @param self The request to encode\\n  /// @return CBOR encoded bytes\\n  function encodeCBOR(Request memory self) internal pure returns (bytes memory) {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"codeLocation\\\");\\n    buffer.writeUInt256(uint256(self.codeLocation));\\n\\n    buffer.writeString(\\\"language\\\");\\n    buffer.writeUInt256(uint256(self.language));\\n\\n    buffer.writeString(\\\"source\\\");\\n    buffer.writeString(self.source);\\n\\n    if (self.args.length > 0) {\\n      buffer.writeString(\\\"args\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.args.length; ++i) {\\n        buffer.writeString(self.args[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    if (self.encryptedSecretsReference.length > 0) {\\n      if (self.secretsLocation == Location.Inline) {\\n        revert NoInlineSecrets();\\n      }\\n      buffer.writeString(\\\"secretsLocation\\\");\\n      buffer.writeUInt256(uint256(self.secretsLocation));\\n      buffer.writeString(\\\"secrets\\\");\\n      buffer.writeBytes(self.encryptedSecretsReference);\\n    }\\n\\n    if (self.bytesArgs.length > 0) {\\n      buffer.writeString(\\\"bytesArgs\\\");\\n      buffer.startArray();\\n      for (uint256 i = 0; i < self.bytesArgs.length; ++i) {\\n        buffer.writeBytes(self.bytesArgs[i]);\\n      }\\n      buffer.endSequence();\\n    }\\n\\n    return buffer.buf.buf;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Sets the codeLocation and code on the request\\n  /// @param self The uninitialized request\\n  /// @param codeLocation The user provided source code location\\n  /// @param language The programming language of the user code\\n  /// @param source The user provided source code or a url\\n  function initializeRequest(\\n    Request memory self,\\n    Location codeLocation,\\n    CodeLanguage language,\\n    string memory source\\n  ) internal pure {\\n    if (bytes(source).length == 0) revert EmptySource();\\n\\n    self.codeLocation = codeLocation;\\n    self.language = language;\\n    self.source = source;\\n  }\\n\\n  /// @notice Initializes a Chainlink Functions Request\\n  /// @dev Simplified version of initializeRequest for PoC\\n  /// @param self The uninitialized request\\n  /// @param javaScriptSource The user provided JS code (must not be empty)\\n  function initializeRequestForInlineJavaScript(Request memory self, string memory javaScriptSource) internal pure {\\n    initializeRequest(self, Location.Inline, CodeLanguage.JavaScript, javaScriptSource);\\n  }\\n\\n  /// @notice Adds Remote user encrypted secrets to a Request\\n  /// @param self The initialized request\\n  /// @param encryptedSecretsReference Encrypted comma-separated string of URLs pointing to off-chain secrets\\n  function addSecretsReference(Request memory self, bytes memory encryptedSecretsReference) internal pure {\\n    if (encryptedSecretsReference.length == 0) revert EmptySecrets();\\n\\n    self.secretsLocation = Location.Remote;\\n    self.encryptedSecretsReference = encryptedSecretsReference;\\n  }\\n\\n  /// @notice Adds DON-hosted secrets reference to a Request\\n  /// @param self The initialized request\\n  /// @param slotID Slot ID of the user's secrets hosted on DON\\n  /// @param version User data version (for the slotID)\\n  function addDONHostedSecrets(Request memory self, uint8 slotID, uint64 version) internal pure {\\n    CBOR.CBORBuffer memory buffer = CBOR.create(DEFAULT_BUFFER_SIZE);\\n\\n    buffer.writeString(\\\"slotID\\\");\\n    buffer.writeUInt64(slotID);\\n    buffer.writeString(\\\"version\\\");\\n    buffer.writeUInt64(version);\\n\\n    self.secretsLocation = Location.DONHosted;\\n    self.encryptedSecretsReference = buffer.buf.buf;\\n  }\\n\\n  /// @notice Sets args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of string args (must not be empty)\\n  function setArgs(Request memory self, string[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.args = args;\\n  }\\n\\n  /// @notice Sets bytes args for the user run function\\n  /// @param self The initialized request\\n  /// @param args The array of bytes args (must not be empty)\\n  function setBytesArgs(Request memory self, bytes[] memory args) internal pure {\\n    if (args.length == 0) revert EmptyArgs();\\n\\n    self.bytesArgs = args;\\n  }\\n}\\n\",\"keccak256\":\"0x149120505b75984b482bc93eb8a59a0ab0bf812a67d8b4e70c5ec989400a7890\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsResponse.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {IFunctionsSubscriptions} from \\\"../interfaces/IFunctionsSubscriptions.sol\\\";\\n\\n/// @title Library of types that are used for fulfillment of a Functions request\\nlibrary FunctionsResponse {\\n  // Used to send request information from the Router to the Coordinator\\n  struct RequestMeta {\\n    bytes data; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 CBOR encoded Chainlink Functions request data, use FunctionsRequest library to encode a request\\n    bytes32 flags; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 Per-subscription flags\\n    address requestingContract; // \\u2550\\u2550\\u2557 The client contract that is sending the request\\n    uint96 availableBalance; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u255d Common LINK balance of the subscription that is controlled by the Router to be used for all consumer requests.\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint64 subscriptionId; //        \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint64 initiatedRequests; //     \\u2551 The number of requests that have been started\\n    uint32 callbackGasLimit; //      \\u2551 The amount of gas that the callback to the consuming contract will be given\\n    uint16 dataVersion; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The version of the structure of the CBOR encoded request data\\n    uint64 completedRequests; // \\u2550\\u2550\\u2550\\u2550\\u2557 The number of requests that have successfully completed or timed out\\n    address subscriptionOwner; // \\u2550\\u2550\\u2550\\u255d The owner of the billing subscription\\n  }\\n\\n  enum FulfillResult {\\n    FULFILLED, // 0\\n    USER_CALLBACK_ERROR, // 1\\n    INVALID_REQUEST_ID, // 2\\n    COST_EXCEEDS_COMMITMENT, // 3\\n    INSUFFICIENT_GAS_PROVIDED, // 4\\n    SUBSCRIPTION_BALANCE_INVARIANT_VIOLATION, // 5\\n    INVALID_COMMITMENT // 6\\n  }\\n\\n  struct Commitment {\\n    bytes32 requestId; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2578 A unique identifier for a Chainlink Functions request\\n    address coordinator; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The Coordinator contract that manages the DON that is servicing a request\\n    uint96 estimatedTotalCostJuels; // \\u2550\\u2550\\u2550\\u2550\\u255d The maximum cost in Juels (1e18) of LINK that will be charged to fulfill a request\\n    address client; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 The client contract that sent the request\\n    uint64 subscriptionId; //              \\u2551 Identifier of the billing subscription that will be charged for the request\\n    uint32 callbackGasLimit; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The amount of gas that the callback to the consuming contract will be given\\n    uint72 adminFee; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2557 Flat fee (in Juels of LINK) that will be paid to the Router Owner for operation of the network\\n    uint72 donFee; //                      \\u2551 Fee (in Juels of LINK) that will be split between Node Operators for servicing a request\\n    uint40 gasOverheadBeforeCallback; //   \\u2551 Represents the average gas execution cost before the fulfillment callback.\\n    uint40 gasOverheadAfterCallback; //    \\u2551 Represents the average gas execution cost after the fulfillment callback.\\n    uint32 timeoutTimestamp; // \\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u2550\\u255d The timestamp at which a request will be eligible to be timed out\\n  }\\n}\\n\",\"keccak256\":\"0x219b5272fd44aeade22130bb9b57b748950febb2f406d5e813ddaa14cd98147c\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"./ConfirmedOwnerWithProposal.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwner is ConfirmedOwnerWithProposal {\\n  constructor(address newOwner) ConfirmedOwnerWithProposal(newOwner, address(0)) {}\\n}\\n\",\"keccak256\":\"0x99d0b0786fe368970009c703f2249bfbc56340ddf1a28b60d2915bb58c34cd72\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwnerWithProposal.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IOwnable.sol\\\";\\n\\n/**\\n * @title The ConfirmedOwner contract\\n * @notice A contract with helpers for basic contract ownership.\\n */\\ncontract ConfirmedOwnerWithProposal is IOwnable {\\n  address private s_owner;\\n  address private s_pendingOwner;\\n\\n  event OwnershipTransferRequested(address indexed from, address indexed to);\\n  event OwnershipTransferred(address indexed from, address indexed to);\\n\\n  constructor(address newOwner, address pendingOwner) {\\n    require(newOwner != address(0), \\\"Cannot set owner to zero\\\");\\n\\n    s_owner = newOwner;\\n    if (pendingOwner != address(0)) {\\n      _transferOwnership(pendingOwner);\\n    }\\n  }\\n\\n  /**\\n   * @notice Allows an owner to begin transferring ownership to a new address,\\n   * pending.\\n   */\\n  function transferOwnership(address to) public override onlyOwner {\\n    _transferOwnership(to);\\n  }\\n\\n  /**\\n   * @notice Allows an ownership transfer to be completed by the recipient.\\n   */\\n  function acceptOwnership() external override {\\n    require(msg.sender == s_pendingOwner, \\\"Must be proposed owner\\\");\\n\\n    address oldOwner = s_owner;\\n    s_owner = msg.sender;\\n    s_pendingOwner = address(0);\\n\\n    emit OwnershipTransferred(oldOwner, msg.sender);\\n  }\\n\\n  /**\\n   * @notice Get the current owner\\n   */\\n  function owner() public view override returns (address) {\\n    return s_owner;\\n  }\\n\\n  /**\\n   * @notice validate, transfer ownership, and emit relevant events\\n   */\\n  function _transferOwnership(address to) private {\\n    require(to != msg.sender, \\\"Cannot transfer to self\\\");\\n\\n    s_pendingOwner = to;\\n\\n    emit OwnershipTransferRequested(s_owner, to);\\n  }\\n\\n  /**\\n   * @notice validate access\\n   */\\n  function _validateOwnership() internal view {\\n    require(msg.sender == s_owner, \\\"Only callable by owner\\\");\\n  }\\n\\n  /**\\n   * @notice Reverts if called by anyone other than the contract owner.\\n   */\\n  modifier onlyOwner() {\\n    _validateOwnership();\\n    _;\\n  }\\n}\\n\",\"keccak256\":\"0x215529a99534a40e6257ef2282a91ea4a95b66debc3997866406907622efb405\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/shared/interfaces/IOwnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface IOwnable {\\n  function owner() external returns (address);\\n\\n  function transferOwnership(address recipient) external;\\n\\n  function acceptOwnership() external;\\n}\\n\",\"keccak256\":\"0x885de72b7b4e4f1bf8ba817a3f2bcc37fd9022d342c4ce76782151c30122d767\",\"license\":\"MIT\"},\"@chainlink/contracts/src/v0.8/vendor/@ensdomains/buffer/v0.1.0/Buffer.sol\":{\"content\":\"// SPDX-License-Identifier: BSD-2-Clause\\npragma solidity ^0.8.4;\\n\\n/**\\n* @dev A library for working with mutable byte buffers in Solidity.\\n*\\n* Byte buffers are mutable and expandable, and provide a variety of primitives\\n* for appending to them. At any time you can fetch a bytes object containing the\\n* current contents of the buffer. The bytes object should not be stored between\\n* operations, as it may change due to resizing of the buffer.\\n*/\\nlibrary Buffer {\\n    /**\\n    * @dev Represents a mutable buffer. Buffers have a current value (buf) and\\n    *      a capacity. The capacity may be longer than the current value, in\\n    *      which case it can be extended without the need to allocate more memory.\\n    */\\n    struct buffer {\\n        bytes buf;\\n        uint capacity;\\n    }\\n\\n    /**\\n    * @dev Initializes a buffer with an initial capacity.\\n    * @param buf The buffer to initialize.\\n    * @param capacity The number of bytes of space to allocate the buffer.\\n    * @return The buffer, for chaining.\\n    */\\n    function init(buffer memory buf, uint capacity) internal pure returns(buffer memory) {\\n        if (capacity % 32 != 0) {\\n            capacity += 32 - (capacity % 32);\\n        }\\n        // Allocate space for the buffer data\\n        buf.capacity = capacity;\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(buf, ptr)\\n            mstore(ptr, 0)\\n            let fpm := add(32, add(ptr, capacity))\\n            if lt(fpm, ptr) {\\n                revert(0, 0)\\n            }\\n            mstore(0x40, fpm)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Initializes a new buffer from an existing bytes object.\\n    *      Changes to the buffer may mutate the original value.\\n    * @param b The bytes object to initialize the buffer with.\\n    * @return A new buffer.\\n    */\\n    function fromBytes(bytes memory b) internal pure returns(buffer memory) {\\n        buffer memory buf;\\n        buf.buf = b;\\n        buf.capacity = b.length;\\n        return buf;\\n    }\\n\\n    function resize(buffer memory buf, uint capacity) private pure {\\n        bytes memory oldbuf = buf.buf;\\n        init(buf, capacity);\\n        append(buf, oldbuf);\\n    }\\n\\n    /**\\n    * @dev Sets buffer length to 0.\\n    * @param buf The buffer to truncate.\\n    * @return The original buffer, for chaining..\\n    */\\n    function truncate(buffer memory buf) internal pure returns (buffer memory) {\\n        assembly {\\n            let bufptr := mload(buf)\\n            mstore(bufptr, 0)\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to copy.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data, uint len) internal pure returns(buffer memory) {\\n        require(len <= data.length);\\n\\n        uint off = buf.buf.length;\\n        uint newCapacity = off + len;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint dest;\\n        uint src;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Length of existing buffer data\\n            let buflen := mload(bufptr)\\n            // Start address = buffer address + offset + sizeof(buffer length)\\n            dest := add(add(bufptr, 32), off)\\n            // Update buffer length if we're extending it\\n            if gt(newCapacity, buflen) {\\n                mstore(bufptr, newCapacity)\\n            }\\n            src := add(data, 32)\\n        }\\n\\n        // Copy word-length chunks while possible\\n        for (; len >= 32; len -= 32) {\\n            assembly {\\n                mstore(dest, mload(src))\\n            }\\n            dest += 32;\\n            src += 32;\\n        }\\n\\n        // Copy remaining bytes\\n        unchecked {\\n            uint mask = (256 ** (32 - len)) - 1;\\n            assembly {\\n                let srcpart := and(mload(src), not(mask))\\n                let destpart := and(mload(dest), mask)\\n                mstore(dest, or(destpart, srcpart))\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a byte string to a buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes memory data) internal pure returns (buffer memory) {\\n        return append(buf, data, data.length);\\n    }\\n\\n    /**\\n    * @dev Appends a byte to the buffer. Resizes if doing so would exceed the\\n    *      capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendUint8(buffer memory buf, uint8 data) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint offPlusOne = off + 1;\\n        if (off >= buf.capacity) {\\n            resize(buf, offPlusOne * 2);\\n        }\\n\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + off\\n            let dest := add(add(bufptr, off), 32)\\n            mstore8(dest, data)\\n            // Update buffer length if we extended it\\n            if gt(offPlusOne, mload(bufptr)) {\\n                mstore(bufptr, offPlusOne)\\n            }\\n        }\\n\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends len bytes of bytes32 to a buffer. Resizes if doing so would\\n    *      exceed the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @param len The number of bytes to write (left-aligned).\\n    * @return The original buffer, for chaining.\\n    */\\n    function append(buffer memory buf, bytes32 data, uint len) private pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        unchecked {\\n            uint mask = (256 ** len) - 1;\\n            // Right-align data\\n            data = data >> (8 * (32 - len));\\n            assembly {\\n                // Memory address of the buffer data\\n                let bufptr := mload(buf)\\n                // Address = buffer address + sizeof(buffer length) + newCapacity\\n                let dest := add(bufptr, newCapacity)\\n                mstore(dest, or(and(mload(dest), not(mask)), data))\\n                // Update buffer length if we extended it\\n                if gt(newCapacity, mload(bufptr)) {\\n                    mstore(bufptr, newCapacity)\\n                }\\n            }\\n        }\\n        return buf;\\n    }\\n\\n    /**\\n    * @dev Appends a bytes20 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chhaining.\\n    */\\n    function appendBytes20(buffer memory buf, bytes20 data) internal pure returns (buffer memory) {\\n        return append(buf, bytes32(data), 20);\\n    }\\n\\n    /**\\n    * @dev Appends a bytes32 to the buffer. Resizes if doing so would exceed\\n    *      the capacity of the buffer.\\n    * @param buf The buffer to append to.\\n    * @param data The data to append.\\n    * @return The original buffer, for chaining.\\n    */\\n    function appendBytes32(buffer memory buf, bytes32 data) internal pure returns (buffer memory) {\\n        return append(buf, data, 32);\\n    }\\n\\n    /**\\n     * @dev Appends a byte to the end of the buffer. Resizes if doing so would\\n     *      exceed the capacity of the buffer.\\n     * @param buf The buffer to append to.\\n     * @param data The data to append.\\n     * @param len The number of bytes to write (right-aligned).\\n     * @return The original buffer.\\n     */\\n    function appendInt(buffer memory buf, uint data, uint len) internal pure returns(buffer memory) {\\n        uint off = buf.buf.length;\\n        uint newCapacity = len + off;\\n        if (newCapacity > buf.capacity) {\\n            resize(buf, newCapacity * 2);\\n        }\\n\\n        uint mask = (256 ** len) - 1;\\n        assembly {\\n            // Memory address of the buffer data\\n            let bufptr := mload(buf)\\n            // Address = buffer address + sizeof(buffer length) + newCapacity\\n            let dest := add(bufptr, newCapacity)\\n            mstore(dest, or(and(mload(dest), not(mask)), data))\\n            // Update buffer length if we extended it\\n            if gt(newCapacity, mload(bufptr)) {\\n                mstore(bufptr, newCapacity)\\n            }\\n        }\\n        return buf;\\n    }\\n}\",\"keccak256\":\"0x0d86b367813922094e02594a406ba89f5e97d3d74ec2ce3c4032566840e302b0\",\"license\":\"BSD-2-Clause\"},\"@chainlink/contracts/src/v0.8/vendor/solidity-cborutils/v2.0.0/CBOR.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.4;\\n\\nimport \\\"../../@ensdomains/buffer/v0.1.0/Buffer.sol\\\";\\n\\n/**\\n* @dev A library for populating CBOR encoded payload in Solidity.\\n*\\n* https://datatracker.ietf.org/doc/html/rfc7049\\n*\\n* The library offers various write* and start* methods to encode values of different types.\\n* The resulted buffer can be obtained with data() method.\\n* Encoding of primitive types is staightforward, whereas encoding of sequences can result\\n* in an invalid CBOR if start/write/end flow is violated.\\n* For the purpose of gas saving, the library does not verify start/write/end flow internally,\\n* except for nested start/end pairs.\\n*/\\n\\nlibrary CBOR {\\n    using Buffer for Buffer.buffer;\\n\\n    struct CBORBuffer {\\n        Buffer.buffer buf;\\n        uint256 depth;\\n    }\\n\\n    uint8 private constant MAJOR_TYPE_INT = 0;\\n    uint8 private constant MAJOR_TYPE_NEGATIVE_INT = 1;\\n    uint8 private constant MAJOR_TYPE_BYTES = 2;\\n    uint8 private constant MAJOR_TYPE_STRING = 3;\\n    uint8 private constant MAJOR_TYPE_ARRAY = 4;\\n    uint8 private constant MAJOR_TYPE_MAP = 5;\\n    uint8 private constant MAJOR_TYPE_TAG = 6;\\n    uint8 private constant MAJOR_TYPE_CONTENT_FREE = 7;\\n\\n    uint8 private constant TAG_TYPE_BIGNUM = 2;\\n    uint8 private constant TAG_TYPE_NEGATIVE_BIGNUM = 3;\\n\\n    uint8 private constant CBOR_FALSE = 20;\\n    uint8 private constant CBOR_TRUE = 21;\\n    uint8 private constant CBOR_NULL = 22;\\n    uint8 private constant CBOR_UNDEFINED = 23;\\n\\n    function create(uint256 capacity) internal pure returns(CBORBuffer memory cbor) {\\n        Buffer.init(cbor.buf, capacity);\\n        cbor.depth = 0;\\n        return cbor;\\n    }\\n\\n    function data(CBORBuffer memory buf) internal pure returns(bytes memory) {\\n        require(buf.depth == 0, \\\"Invalid CBOR\\\");\\n        return buf.buf.buf;\\n    }\\n\\n    function writeUInt256(CBORBuffer memory buf, uint256 value) internal pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_BIGNUM));\\n        writeBytes(buf, abi.encode(value));\\n    }\\n\\n    function writeInt256(CBORBuffer memory buf, int256 value) internal pure {\\n        if (value < 0) {\\n            buf.buf.appendUint8(\\n                uint8((MAJOR_TYPE_TAG << 5) | TAG_TYPE_NEGATIVE_BIGNUM)\\n            );\\n            writeBytes(buf, abi.encode(uint256(-1 - value)));\\n        } else {\\n            writeUInt256(buf, uint256(value));\\n        }\\n    }\\n\\n    function writeUInt64(CBORBuffer memory buf, uint64 value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_INT, value);\\n    }\\n\\n    function writeInt64(CBORBuffer memory buf, int64 value) internal pure {\\n        if(value >= 0) {\\n            writeFixedNumeric(buf, MAJOR_TYPE_INT, uint64(value));\\n        } else{\\n            writeFixedNumeric(buf, MAJOR_TYPE_NEGATIVE_INT, uint64(-1 - value));\\n        }\\n    }\\n\\n    function writeBytes(CBORBuffer memory buf, bytes memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_BYTES, uint64(value.length));\\n        buf.buf.append(value);\\n    }\\n\\n    function writeString(CBORBuffer memory buf, string memory value) internal pure {\\n        writeFixedNumeric(buf, MAJOR_TYPE_STRING, uint64(bytes(value).length));\\n        buf.buf.append(bytes(value));\\n    }\\n\\n    function writeBool(CBORBuffer memory buf, bool value) internal pure {\\n        writeContentFree(buf, value ? CBOR_TRUE : CBOR_FALSE);\\n    }\\n\\n    function writeNull(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_NULL);\\n    }\\n\\n    function writeUndefined(CBORBuffer memory buf) internal pure {\\n        writeContentFree(buf, CBOR_UNDEFINED);\\n    }\\n\\n    function startArray(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_ARRAY);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedArray(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_ARRAY, length);\\n    }\\n\\n    function startMap(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_MAP);\\n        buf.depth += 1;\\n    }\\n\\n    function startFixedMap(CBORBuffer memory buf, uint64 length) internal pure {\\n        writeDefiniteLengthType(buf, MAJOR_TYPE_MAP, length);\\n    }\\n\\n    function endSequence(CBORBuffer memory buf) internal pure {\\n        writeIndefiniteLengthType(buf, MAJOR_TYPE_CONTENT_FREE);\\n        buf.depth -= 1;\\n    }\\n\\n    function writeKVString(CBORBuffer memory buf, string memory key, string memory value) internal pure {\\n        writeString(buf, key);\\n        writeString(buf, value);\\n    }\\n\\n    function writeKVBytes(CBORBuffer memory buf, string memory key, bytes memory value) internal pure {\\n        writeString(buf, key);\\n        writeBytes(buf, value);\\n    }\\n\\n    function writeKVUInt256(CBORBuffer memory buf, string memory key, uint256 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt256(buf, value);\\n    }\\n\\n    function writeKVInt256(CBORBuffer memory buf, string memory key, int256 value) internal pure {\\n        writeString(buf, key);\\n        writeInt256(buf, value);\\n    }\\n\\n    function writeKVUInt64(CBORBuffer memory buf, string memory key, uint64 value) internal pure {\\n        writeString(buf, key);\\n        writeUInt64(buf, value);\\n    }\\n\\n    function writeKVInt64(CBORBuffer memory buf, string memory key, int64 value) internal pure {\\n        writeString(buf, key);\\n        writeInt64(buf, value);\\n    }\\n\\n    function writeKVBool(CBORBuffer memory buf, string memory key, bool value) internal pure {\\n        writeString(buf, key);\\n        writeBool(buf, value);\\n    }\\n\\n    function writeKVNull(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeNull(buf);\\n    }\\n\\n    function writeKVUndefined(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        writeUndefined(buf);\\n    }\\n\\n    function writeKVMap(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startMap(buf);\\n    }\\n\\n    function writeKVArray(CBORBuffer memory buf, string memory key) internal pure {\\n        writeString(buf, key);\\n        startArray(buf);\\n    }\\n\\n    function writeFixedNumeric(\\n        CBORBuffer memory buf,\\n        uint8 major,\\n        uint64 value\\n    ) private pure {\\n        if (value <= 23) {\\n            buf.buf.appendUint8(uint8((major << 5) | value));\\n        } else if (value <= 0xFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 24));\\n            buf.buf.appendInt(value, 1);\\n        } else if (value <= 0xFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 25));\\n            buf.buf.appendInt(value, 2);\\n        } else if (value <= 0xFFFFFFFF) {\\n            buf.buf.appendUint8(uint8((major << 5) | 26));\\n            buf.buf.appendInt(value, 4);\\n        } else {\\n            buf.buf.appendUint8(uint8((major << 5) | 27));\\n            buf.buf.appendInt(value, 8);\\n        }\\n    }\\n\\n    function writeIndefiniteLengthType(CBORBuffer memory buf, uint8 major)\\n        private\\n        pure\\n    {\\n        buf.buf.appendUint8(uint8((major << 5) | 31));\\n    }\\n\\n    function writeDefiniteLengthType(CBORBuffer memory buf, uint8 major, uint64 length)\\n        private\\n        pure\\n    {\\n        writeFixedNumeric(buf, major, length);\\n    }\\n\\n    function writeContentFree(CBORBuffer memory buf, uint8 value) private pure {\\n        buf.buf.appendUint8(uint8((MAJOR_TYPE_CONTENT_FREE << 5) | value));\\n    }\\n}\",\"keccak256\":\"0xdecf04203502670ac72ba466c75e4f87f4419907365005f0d73e7d07ee3e5715\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC6093.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (interfaces/draft-IERC6093.sol)\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard ERC20 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC20 tokens.\\n */\\ninterface IERC20Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientBalance(address sender, uint256 balance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC20InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC20InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender`\\u2019s `allowance`. Used in transfers.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     * @param allowance Amount of tokens a `spender` is allowed to operate with.\\n     * @param needed Minimum amount required to perform a transfer.\\n     */\\n    error ERC20InsufficientAllowance(address spender, uint256 allowance, uint256 needed);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC20InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `spender` to be approved. Used in approvals.\\n     * @param spender Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC20InvalidSpender(address spender);\\n}\\n\\n/**\\n * @dev Standard ERC721 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC721 tokens.\\n */\\ninterface IERC721Errors {\\n    /**\\n     * @dev Indicates that an address can't be an owner. For example, `address(0)` is a forbidden owner in EIP-20.\\n     * Used in balance queries.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721InvalidOwner(address owner);\\n\\n    /**\\n     * @dev Indicates a `tokenId` whose `owner` is the zero address.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721NonexistentToken(uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates an error related to the ownership over a particular token. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param tokenId Identifier number of a token.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC721IncorrectOwner(address sender, uint256 tokenId, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC721InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC721InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC721InsufficientApproval(address operator, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC721InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC721InvalidOperator(address operator);\\n}\\n\\n/**\\n * @dev Standard ERC1155 Errors\\n * Interface of the https://eips.ethereum.org/EIPS/eip-6093[ERC-6093] custom errors for ERC1155 tokens.\\n */\\ninterface IERC1155Errors {\\n    /**\\n     * @dev Indicates an error related to the current `balance` of a `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     * @param balance Current balance for the interacting account.\\n     * @param needed Minimum amount required to perform a transfer.\\n     * @param tokenId Identifier number of a token.\\n     */\\n    error ERC1155InsufficientBalance(address sender, uint256 balance, uint256 needed, uint256 tokenId);\\n\\n    /**\\n     * @dev Indicates a failure with the token `sender`. Used in transfers.\\n     * @param sender Address whose tokens are being transferred.\\n     */\\n    error ERC1155InvalidSender(address sender);\\n\\n    /**\\n     * @dev Indicates a failure with the token `receiver`. Used in transfers.\\n     * @param receiver Address to which tokens are being transferred.\\n     */\\n    error ERC1155InvalidReceiver(address receiver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator`\\u2019s approval. Used in transfers.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     * @param owner Address of the current owner of a token.\\n     */\\n    error ERC1155MissingApprovalForAll(address operator, address owner);\\n\\n    /**\\n     * @dev Indicates a failure with the `approver` of a token to be approved. Used in approvals.\\n     * @param approver Address initiating an approval operation.\\n     */\\n    error ERC1155InvalidApprover(address approver);\\n\\n    /**\\n     * @dev Indicates a failure with the `operator` to be approved. Used in approvals.\\n     * @param operator Address that may be allowed to operate on tokens without being their owner.\\n     */\\n    error ERC1155InvalidOperator(address operator);\\n\\n    /**\\n     * @dev Indicates an array length mismatch between ids and values in a safeBatchTransferFrom operation.\\n     * Used in batch transfers.\\n     * @param idsLength Length of the array of token identifiers\\n     * @param valuesLength Length of the array of token amounts\\n     */\\n    error ERC1155InvalidArrayLength(uint256 idsLength, uint256 valuesLength);\\n}\\n\",\"keccak256\":\"0x60c65f701957fdd6faea1acb0bb45825791d473693ed9ecb34726fdfaa849dd7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/ERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/ERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"./IERC20.sol\\\";\\nimport {IERC20Metadata} from \\\"./extensions/IERC20Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {IERC20Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC20} interface.\\n *\\n * This implementation is agnostic to the way tokens are created. This means\\n * that a supply mechanism has to be added in a derived contract using {_mint}.\\n *\\n * TIP: For a detailed writeup see our guide\\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\\n * to implement supply mechanisms].\\n *\\n * The default value of {decimals} is 18. To change this, you should override\\n * this function so it returns a different value.\\n *\\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\\n * instead returning `false` on failure. This behavior is nonetheless\\n * conventional and does not conflict with the expectations of ERC20\\n * applications.\\n *\\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\\n * This allows applications to reconstruct the allowance for all accounts just\\n * by listening to said events. Other implementations of the EIP may not emit\\n * these events, as it isn't required by the specification.\\n */\\nabstract contract ERC20 is Context, IERC20, IERC20Metadata, IERC20Errors {\\n    mapping(address account => uint256) private _balances;\\n\\n    mapping(address account => mapping(address spender => uint256)) private _allowances;\\n\\n    uint256 private _totalSupply;\\n\\n    string private _name;\\n    string private _symbol;\\n\\n    /**\\n     * @dev Sets the values for {name} and {symbol}.\\n     *\\n     * All two of these values are immutable: they can only be set once during\\n     * construction.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev Returns the symbol of the token, usually a shorter version of the\\n     * name.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev Returns the number of decimals used to get its user representation.\\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\\n     *\\n     * Tokens usually opt for a value of 18, imitating the relationship between\\n     * Ether and Wei. This is the default value returned by this function, unless\\n     * it's overridden.\\n     *\\n     * NOTE: This information is only used for _display_ purposes: it in\\n     * no way affects any of the arithmetic of the contract, including\\n     * {IERC20-balanceOf} and {IERC20-transfer}.\\n     */\\n    function decimals() public view virtual returns (uint8) {\\n        return 18;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-totalSupply}.\\n     */\\n    function totalSupply() public view virtual returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-balanceOf}.\\n     */\\n    function balanceOf(address account) public view virtual returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transfer}.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - the caller must have a balance of at least `value`.\\n     */\\n    function transfer(address to, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _transfer(owner, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-allowance}.\\n     */\\n    function allowance(address owner, address spender) public view virtual returns (uint256) {\\n        return _allowances[owner][spender];\\n    }\\n\\n    /**\\n     * @dev See {IERC20-approve}.\\n     *\\n     * NOTE: If `value` is the maximum `uint256`, the allowance is not updated on\\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     */\\n    function approve(address spender, uint256 value) public virtual returns (bool) {\\n        address owner = _msgSender();\\n        _approve(owner, spender, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev See {IERC20-transferFrom}.\\n     *\\n     * Emits an {Approval} event indicating the updated allowance. This is not\\n     * required by the EIP. See the note at the beginning of {ERC20}.\\n     *\\n     * NOTE: Does not update the allowance if the current allowance\\n     * is the maximum `uint256`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` and `to` cannot be the zero address.\\n     * - `from` must have a balance of at least `value`.\\n     * - the caller must have allowance for ``from``'s tokens of at least\\n     * `value`.\\n     */\\n    function transferFrom(address from, address to, uint256 value) public virtual returns (bool) {\\n        address spender = _msgSender();\\n        _spendAllowance(from, spender, value);\\n        _transfer(from, to, value);\\n        return true;\\n    }\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to`.\\n     *\\n     * This internal function is equivalent to {transfer}, and can be used to\\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _transfer(address from, address to, uint256 value) internal {\\n        if (from == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        if (to == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Transfers a `value` amount of tokens from `from` to `to`, or alternatively mints (or burns) if `from`\\n     * (or `to`) is the zero address. All customizations to transfers, mints, and burns should be done by overriding\\n     * this function.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _update(address from, address to, uint256 value) internal virtual {\\n        if (from == address(0)) {\\n            // Overflow check required: The rest of the code assumes that totalSupply never overflows\\n            _totalSupply += value;\\n        } else {\\n            uint256 fromBalance = _balances[from];\\n            if (fromBalance < value) {\\n                revert ERC20InsufficientBalance(from, fromBalance, value);\\n            }\\n            unchecked {\\n                // Overflow not possible: value <= fromBalance <= totalSupply.\\n                _balances[from] = fromBalance - value;\\n            }\\n        }\\n\\n        if (to == address(0)) {\\n            unchecked {\\n                // Overflow not possible: value <= totalSupply or value <= fromBalance <= totalSupply.\\n                _totalSupply -= value;\\n            }\\n        } else {\\n            unchecked {\\n                // Overflow not possible: balance + value is at most totalSupply, which we know fits into a uint256.\\n                _balances[to] += value;\\n            }\\n        }\\n\\n        emit Transfer(from, to, value);\\n    }\\n\\n    /**\\n     * @dev Creates a `value` amount of tokens and assigns them to `account`, by transferring it from address(0).\\n     * Relies on the `_update` mechanism\\n     *\\n     * Emits a {Transfer} event with `from` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead.\\n     */\\n    function _mint(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidReceiver(address(0));\\n        }\\n        _update(address(0), account, value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, lowering the total supply.\\n     * Relies on the `_update` mechanism.\\n     *\\n     * Emits a {Transfer} event with `to` set to the zero address.\\n     *\\n     * NOTE: This function is not virtual, {_update} should be overridden instead\\n     */\\n    function _burn(address account, uint256 value) internal {\\n        if (account == address(0)) {\\n            revert ERC20InvalidSender(address(0));\\n        }\\n        _update(account, address(0), value);\\n    }\\n\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over the `owner` s tokens.\\n     *\\n     * This internal function is equivalent to `approve`, and can be used to\\n     * e.g. set automatic allowances for certain subsystems, etc.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `owner` cannot be the zero address.\\n     * - `spender` cannot be the zero address.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address owner, address spender, uint256 value) internal {\\n        _approve(owner, spender, value, true);\\n    }\\n\\n    /**\\n     * @dev Variant of {_approve} with an optional flag to enable or disable the {Approval} event.\\n     *\\n     * By default (when calling {_approve}) the flag is set to true. On the other hand, approval changes made by\\n     * `_spendAllowance` during the `transferFrom` operation set the flag to false. This saves gas by not emitting any\\n     * `Approval` event during `transferFrom` operations.\\n     *\\n     * Anyone who wishes to continue emitting `Approval` events on the`transferFrom` operation can force the flag to\\n     * true using the following override:\\n     * ```\\n     * function _approve(address owner, address spender, uint256 value, bool) internal virtual override {\\n     *     super._approve(owner, spender, value, true);\\n     * }\\n     * ```\\n     *\\n     * Requirements are the same as {_approve}.\\n     */\\n    function _approve(address owner, address spender, uint256 value, bool emitEvent) internal virtual {\\n        if (owner == address(0)) {\\n            revert ERC20InvalidApprover(address(0));\\n        }\\n        if (spender == address(0)) {\\n            revert ERC20InvalidSpender(address(0));\\n        }\\n        _allowances[owner][spender] = value;\\n        if (emitEvent) {\\n            emit Approval(owner, spender, value);\\n        }\\n    }\\n\\n    /**\\n     * @dev Updates `owner` s allowance for `spender` based on spent `value`.\\n     *\\n     * Does not update the allowance value in case of infinite allowance.\\n     * Revert if not enough allowance is available.\\n     *\\n     * Does not emit an {Approval} event.\\n     */\\n    function _spendAllowance(address owner, address spender, uint256 value) internal virtual {\\n        uint256 currentAllowance = allowance(owner, spender);\\n        if (currentAllowance != type(uint256).max) {\\n            if (currentAllowance < value) {\\n                revert ERC20InsufficientAllowance(spender, currentAllowance, value);\\n            }\\n            unchecked {\\n                _approve(owner, spender, currentAllowance - value, false);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3e1fa9d1987f8d349dfb4d6fe93bf2ca014b52ba335cfac30bfe71e357e6f80\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/ERC20Burnable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ERC20} from \\\"../ERC20.sol\\\";\\nimport {Context} from \\\"../../../utils/Context.sol\\\";\\n\\n/**\\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\\n * tokens and those that they have an allowance for, in a way that can be\\n * recognized off-chain (via event analysis).\\n */\\nabstract contract ERC20Burnable is Context, ERC20 {\\n    /**\\n     * @dev Destroys a `value` amount of tokens from the caller.\\n     *\\n     * See {ERC20-_burn}.\\n     */\\n    function burn(uint256 value) public virtual {\\n        _burn(_msgSender(), value);\\n    }\\n\\n    /**\\n     * @dev Destroys a `value` amount of tokens from `account`, deducting from\\n     * the caller's allowance.\\n     *\\n     * See {ERC20-_burn} and {ERC20-allowance}.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have allowance for ``accounts``'s tokens of at least\\n     * `value`.\\n     */\\n    function burnFrom(address account, uint256 value) public virtual {\\n        _spendAllowance(account, _msgSender(), value);\\n        _burn(account, value);\\n    }\\n}\\n\",\"keccak256\":\"0x2659248df25e34000ed214b3dc8da2160bc39874c992b477d9e2b1b3283dc073\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\n\\n/**\\n * @dev Interface for the optional metadata functions from the ERC20 standard.\\n */\\ninterface IERC20Metadata is IERC20 {\\n    /**\\n     * @dev Returns the name of the token.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the symbol of the token.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the decimals places of the token.\\n     */\\n    function decimals() external view returns (uint8);\\n}\\n\",\"keccak256\":\"0xaa761817f6cd7892fcf158b3c776b34551cde36f48ff9703d53898bc45a94ea2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/ERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"./IERC721.sol\\\";\\nimport {IERC721Receiver} from \\\"./IERC721Receiver.sol\\\";\\nimport {IERC721Metadata} from \\\"./extensions/IERC721Metadata.sol\\\";\\nimport {Context} from \\\"../../utils/Context.sol\\\";\\nimport {Strings} from \\\"../../utils/Strings.sol\\\";\\nimport {IERC165, ERC165} from \\\"../../utils/introspection/ERC165.sol\\\";\\nimport {IERC721Errors} from \\\"../../interfaces/draft-IERC6093.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\nabstract contract ERC721 is Context, ERC165, IERC721, IERC721Metadata, IERC721Errors {\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    mapping(uint256 tokenId => address) private _owners;\\n\\n    mapping(address owner => uint256) private _balances;\\n\\n    mapping(uint256 tokenId => address) private _tokenApprovals;\\n\\n    mapping(address owner => mapping(address operator => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual returns (uint256) {\\n        if (owner == address(0)) {\\n            revert ERC721InvalidOwner(address(0));\\n        }\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual returns (address) {\\n        return _requireOwned(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual returns (string memory) {\\n        _requireOwned(tokenId);\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string.concat(baseURI, tokenId.toString()) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overridden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual {\\n        _approve(to, tokenId, _msgSender());\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual returns (address) {\\n        _requireOwned(tokenId);\\n\\n        return _getApproved(tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual {\\n        _setApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) public virtual {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        // Setting an \\\"auth\\\" arguments enables the `_isAuthorized` check which verifies that the token exists\\n        // (from != 0). Therefore, it is not needed to verify that the return value is not 0 here.\\n        address previousOwner = _update(to, tokenId, _msgSender());\\n        if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) public {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes memory data) public virtual {\\n        transferFrom(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId`. Does NOT revert if token doesn't exist\\n     *\\n     * IMPORTANT: Any overrides to this function that add ownership of tokens not tracked by the\\n     * core ERC721 logic MUST be matched with the use of {_increaseBalance} to keep balances\\n     * consistent with ownership. The invariant to preserve is that for any address `a` the value returned by\\n     * `balanceOf(a)` must be equal to the number of tokens such that `_ownerOf(tokenId)` is `a`.\\n     */\\n    function _ownerOf(uint256 tokenId) internal view virtual returns (address) {\\n        return _owners[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns the approved address for `tokenId`. Returns 0 if `tokenId` is not minted.\\n     */\\n    function _getApproved(uint256 tokenId) internal view virtual returns (address) {\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `owner`'s tokens, or `tokenId` in\\n     * particular (ignoring whether it is owned by `owner`).\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _isAuthorized(address owner, address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        return\\n            spender != address(0) &&\\n            (owner == spender || isApprovedForAll(owner, spender) || _getApproved(tokenId) == spender);\\n    }\\n\\n    /**\\n     * @dev Checks if `spender` can operate on `tokenId`, assuming the provided `owner` is the actual owner.\\n     * Reverts if `spender` does not have approval from the provided `owner` for the given token or for all its assets\\n     * the `spender` for the specific `tokenId`.\\n     *\\n     * WARNING: This function assumes that `owner` is the actual owner of `tokenId` and does not verify this\\n     * assumption.\\n     */\\n    function _checkAuthorized(address owner, address spender, uint256 tokenId) internal view virtual {\\n        if (!_isAuthorized(owner, spender, tokenId)) {\\n            if (owner == address(0)) {\\n                revert ERC721NonexistentToken(tokenId);\\n            } else {\\n                revert ERC721InsufficientApproval(spender, tokenId);\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Unsafe write access to the balances, used by extensions that \\\"mint\\\" tokens using an {ownerOf} override.\\n     *\\n     * NOTE: the value is limited to type(uint128).max. This protect against _balance overflow. It is unrealistic that\\n     * a uint256 would ever overflow from increments when these increments are bounded to uint128 values.\\n     *\\n     * WARNING: Increasing an account's balance using this function tends to be paired with an override of the\\n     * {_ownerOf} function to resolve the ownership of the corresponding tokens so that balances and ownership\\n     * remain consistent with one another.\\n     */\\n    function _increaseBalance(address account, uint128 value) internal virtual {\\n        unchecked {\\n            _balances[account] += value;\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from its current owner to `to`, or alternatively mints (or burns) if the current owner\\n     * (or `to`) is the zero address. Returns the owner of the `tokenId` before the update.\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that\\n     * `auth` is either the owner of the token, or approved to operate on the token (by the owner).\\n     *\\n     * Emits a {Transfer} event.\\n     *\\n     * NOTE: If overriding this function in a way that tracks balances, see also {_increaseBalance}.\\n     */\\n    function _update(address to, uint256 tokenId, address auth) internal virtual returns (address) {\\n        address from = _ownerOf(tokenId);\\n\\n        // Perform (optional) operator check\\n        if (auth != address(0)) {\\n            _checkAuthorized(from, auth, tokenId);\\n        }\\n\\n        // Execute the update\\n        if (from != address(0)) {\\n            // Clear approval. No need to re-authorize or emit the Approval event\\n            _approve(address(0), tokenId, address(0), false);\\n\\n            unchecked {\\n                _balances[from] -= 1;\\n            }\\n        }\\n\\n        if (to != address(0)) {\\n            unchecked {\\n                _balances[to] += 1;\\n            }\\n        }\\n\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n\\n        return from;\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner != address(0)) {\\n            revert ERC721InvalidSender(address(0));\\n        }\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId`, transfers it to `to` and checks for `to` acceptance.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _mint(to, tokenId);\\n        _checkOnERC721Received(address(0), to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     * This is an internal function that does not check if the sender is authorized to operate on the token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal {\\n        address previousOwner = _update(address(0), tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(address from, address to, uint256 tokenId) internal {\\n        if (to == address(0)) {\\n            revert ERC721InvalidReceiver(address(0));\\n        }\\n        address previousOwner = _update(to, tokenId, address(0));\\n        if (previousOwner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        } else if (previousOwner != from) {\\n            revert ERC721IncorrectOwner(from, tokenId, previousOwner);\\n        }\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking that contract recipients\\n     * are aware of the ERC721 standard to prevent tokens from being forever locked.\\n     *\\n     * `data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is like {safeTransferFrom} in the sense that it invokes\\n     * {IERC721Receiver-onERC721Received} on the receiver, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - `to` cannot be the zero address.\\n     * - `from` cannot be the zero address.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId) internal {\\n        _safeTransfer(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeTransfer-address-address-uint256-}[`_safeTransfer`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeTransfer(address from, address to, uint256 tokenId, bytes memory data) internal virtual {\\n        _transfer(from, to, tokenId);\\n        _checkOnERC721Received(from, to, tokenId, data);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * The `auth` argument is optional. If the value passed is non 0, then this function will check that `auth` is\\n     * either the owner of the token, or approved to operate on all tokens held by this owner.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Overrides to this logic should be done to the variant with an additional `bool emitEvent` argument.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth) internal {\\n        _approve(to, tokenId, auth, true);\\n    }\\n\\n    /**\\n     * @dev Variant of `_approve` with an optional flag to enable or disable the {Approval} event. The event is not\\n     * emitted in the context of transfers.\\n     */\\n    function _approve(address to, uint256 tokenId, address auth, bool emitEvent) internal virtual {\\n        // Avoid reading the owner unless necessary\\n        if (emitEvent || auth != address(0)) {\\n            address owner = _requireOwned(tokenId);\\n\\n            // We do not use _isAuthorized because single-token approvals should not be able to call approve\\n            if (auth != address(0) && owner != auth && !isApprovedForAll(owner, auth)) {\\n                revert ERC721InvalidApprover(auth);\\n            }\\n\\n            if (emitEvent) {\\n                emit Approval(owner, to, tokenId);\\n            }\\n        }\\n\\n        _tokenApprovals[tokenId] = to;\\n    }\\n\\n    /**\\n     * @dev Approve `operator` to operate on all of `owner` tokens\\n     *\\n     * Requirements:\\n     * - operator can't be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function _setApprovalForAll(address owner, address operator, bool approved) internal virtual {\\n        if (operator == address(0)) {\\n            revert ERC721InvalidOperator(operator);\\n        }\\n        _operatorApprovals[owner][operator] = approved;\\n        emit ApprovalForAll(owner, operator, approved);\\n    }\\n\\n    /**\\n     * @dev Reverts if the `tokenId` doesn't have a current owner (it hasn't been minted, or it has been burned).\\n     * Returns the owner.\\n     *\\n     * Overrides to ownership logic should be done to {_ownerOf}.\\n     */\\n    function _requireOwned(uint256 tokenId) internal view returns (address) {\\n        address owner = _ownerOf(tokenId);\\n        if (owner == address(0)) {\\n            revert ERC721NonexistentToken(tokenId);\\n        }\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev Private function to invoke {IERC721Receiver-onERC721Received} on a target address. This will revert if the\\n     * recipient doesn't accept the token transfer. The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param data bytes optional data to send along with the call\\n     */\\n    function _checkOnERC721Received(address from, address to, uint256 tokenId, bytes memory data) private {\\n        if (to.code.length > 0) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, data) returns (bytes4 retval) {\\n                if (retval != IERC721Receiver.onERC721Received.selector) {\\n                    revert ERC721InvalidReceiver(to);\\n                }\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert ERC721InvalidReceiver(to);\\n                } else {\\n                    /// @solidity memory-safe-assembly\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x13dd061770956c8489b80cfc89d9cdfc8ea2783d953691ea037a380731d52784\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId, bytes calldata data) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or\\n     *   {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon\\n     *   a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the address zero.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x5ef46daa3b58ef2702279d514780316efaa952915ee1aa3396f041ee2982b0b4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/IERC721Receiver.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be\\n     * reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0x7f7a26306c79a65fb8b3b6c757cd74660c532cd8a02e165488e30027dd34ca49\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC721/extensions/IERC721Metadata.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC721} from \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0x37d1aaaa5a2908a09e9dcf56a26ddf762ecf295afb5964695937344fc6802ce1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x75a4ee64c68dbd5f38bddd06e664a64c8271b4caa554fb6f0607dfd672bb4bf3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Math} from \\\"./math/Math.sol\\\";\\nimport {SignedMath} from \\\"./math/SignedMath.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant HEX_DIGITS = \\\"0123456789abcdef\\\";\\n    uint8 private constant ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev The `value` string doesn't fit in the specified `length`.\\n     */\\n    error StringsInsufficientHexLength(uint256 value, uint256 length);\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), HEX_DIGITS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `int256` to its ASCII `string` decimal representation.\\n     */\\n    function toStringSigned(int256 value) internal pure returns (string memory) {\\n        return string.concat(value < 0 ? \\\"-\\\" : \\\"\\\", toString(SignedMath.abs(value)));\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        uint256 localValue = value;\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = HEX_DIGITS[localValue & 0xf];\\n            localValue >>= 4;\\n        }\\n        if (localValue != 0) {\\n            revert StringsInsufficientHexLength(value, length);\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal\\n     * representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), ADDRESS_LENGTH);\\n    }\\n\\n    /**\\n     * @dev Returns true if the two strings are equal.\\n     */\\n    function equal(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(bytes(a)) == keccak256(bytes(b));\\n    }\\n}\\n\",\"keccak256\":\"0x55f102ea785d8399c0e58d1108e2d289506dde18abc6db1b7f68c1f9f9bc5792\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/SignedMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/SignedMath.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard signed math utilities missing in the Solidity language.\\n */\\nlibrary SignedMath {\\n    /**\\n     * @dev Returns the largest of two signed numbers.\\n     */\\n    function max(int256 a, int256 b) internal pure returns (int256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two signed numbers.\\n     */\\n    function min(int256 a, int256 b) internal pure returns (int256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two signed numbers without overflow.\\n     * The result is rounded towards zero.\\n     */\\n    function average(int256 a, int256 b) internal pure returns (int256) {\\n        // Formula from the book \\\"Hacker's Delight\\\"\\n        int256 x = (a & b) + ((a ^ b) >> 1);\\n        return x + (int256(uint256(x) >> 255) & (a ^ b));\\n    }\\n\\n    /**\\n     * @dev Returns the absolute unsigned value of a signed value.\\n     */\\n    function abs(int256 n) internal pure returns (uint256) {\\n        unchecked {\\n            // must be unchecked in order to support `n = type(int256).min`\\n            return uint256(n >= 0 ? n : -n);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x5f7e4076e175393767754387c962926577f1660dd9b810187b9002407656be72\",\"license\":\"MIT\"},\"contracts/Calculator.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport {FunctionsClient} from '@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/FunctionsClient.sol';\\nimport {ConfirmedOwner} from '@chainlink/contracts/src/v0.8/shared/access/ConfirmedOwner.sol';\\nimport {FunctionsRequest} from '@chainlink/contracts/src/v0.8/functions/dev/v1_0_0/libraries/FunctionsRequest.sol';\\n\\ncontract Calculator is FunctionsClient, ConfirmedOwner {\\n\\tusing FunctionsRequest for FunctionsRequest.Request;\\n\\n\\tstruct Travel {\\n\\t\\tuint256 distance;\\n\\t\\tuint256 nights;\\n\\t\\tuint256 total;\\n\\t}\\n\\n\\tbytes public s_lastError;\\n\\tbytes public s_lastResponse;\\n\\tbytes32 public s_lastRequestId;\\n\\n\\tmapping(bytes32 => Travel) public travels;\\n\\n\\terror UnexpectedRequestID(bytes32 requestId);\\n\\n\\tevent Response(bytes32 indexed requestId, bytes response, bytes err);\\n\\n\\tconstructor(\\n\\t\\taddress router\\n\\t) FunctionsClient(router) ConfirmedOwner(msg.sender) {}\\n\\n\\t/**\\n\\t * @notice Send a simple request\\n\\t * @param source JavaScript source code\\n\\t * @param encryptedSecretsUrls Encrypted URLs where to fetch user secrets\\n\\t * @param donHostedSecretsSlotID Don hosted secrets slotId\\n\\t * @param donHostedSecretsVersion Don hosted secrets version\\n\\t * @param args List of arguments accessible from within the source code\\n\\t * @param bytesArgs Array of bytes arguments, represented as hex strings\\n\\t * @param subscriptionId Billing ID\\n\\t */\\n\\tfunction sendRequest(\\n\\t\\tstring memory source,\\n\\t\\tbytes memory encryptedSecretsUrls,\\n\\t\\tuint8 donHostedSecretsSlotID,\\n\\t\\tuint64 donHostedSecretsVersion,\\n\\t\\tstring[] memory args,\\n\\t\\tbytes[] memory bytesArgs,\\n\\t\\tuint64 subscriptionId,\\n\\t\\tuint32 gasLimit,\\n\\t\\tbytes32 jobId\\n\\t) external returns (bytes32 requestId) {\\n\\t\\tFunctionsRequest.Request memory req;\\n\\t\\treq.initializeRequestForInlineJavaScript(source);\\n\\t\\tif (encryptedSecretsUrls.length > 0)\\n\\t\\t\\treq.addSecretsReference(encryptedSecretsUrls);\\n\\t\\telse if (donHostedSecretsVersion > 0) {\\n\\t\\t\\treq.addDONHostedSecrets(donHostedSecretsSlotID, donHostedSecretsVersion);\\n\\t\\t}\\n\\t\\tif (args.length > 0) req.setArgs(args);\\n\\t\\tif (bytesArgs.length > 0) req.setBytesArgs(bytesArgs);\\n\\t\\ts_lastRequestId = _sendRequest(\\n\\t\\t\\treq.encodeCBOR(),\\n\\t\\t\\tsubscriptionId,\\n\\t\\t\\tgasLimit,\\n\\t\\t\\tjobId\\n\\t\\t);\\n\\t\\treturn s_lastRequestId;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Send a pre-encoded CBOR request\\n\\t * @param request CBOR-encoded request data\\n\\t * @param subscriptionId Billing ID\\n\\t * @param gasLimit The maximum amount of gas the request can consume\\n\\t * @param jobId ID of the job to be invoked\\n\\t * @return requestId The ID of the sent request\\n\\t */\\n\\tfunction sendRequestCBOR(\\n\\t\\tbytes memory request,\\n\\t\\tuint64 subscriptionId,\\n\\t\\tuint32 gasLimit,\\n\\t\\tbytes32 jobId\\n\\t) external onlyOwner returns (bytes32 requestId) {\\n\\t\\ts_lastRequestId = _sendRequest(request, subscriptionId, gasLimit, jobId);\\n\\t\\treturn s_lastRequestId;\\n\\t}\\n\\n\\t/**\\n\\t * @notice Store latest result/error\\n\\t * @param requestId The request ID, returned by sendRequest()\\n\\t * @param response Aggregated response from the user code\\n\\t * @param err Aggregated error from the user code or from the execution pipeline\\n\\t * Either response or error parameter will be set, but never both\\n\\t */\\n\\tfunction fulfillRequest(\\n\\t\\tbytes32 requestId,\\n\\t\\tbytes memory response,\\n\\t\\tbytes memory err\\n\\t) internal override {\\n\\t\\tif (s_lastRequestId != requestId) {\\n\\t\\t\\trevert UnexpectedRequestID(requestId);\\n\\t\\t}\\n\\n\\t\\tif (response.length > 0) {\\n\\t\\t\\tuint256 carbonFootprint = abi.decode(response, (uint256));\\n\\n\\t\\t\\tuint256 factor = 10 ** 18;\\n\\n\\t\\t\\tuint256 _nights = carbonFootprint / (factor * factor);\\n\\t\\t\\tuint256 _distance = (carbonFootprint / factor) % factor;\\n\\t\\t\\tuint256 _total = carbonFootprint % factor;\\n\\n\\t\\t\\ttravels[s_lastRequestId] = Travel({\\n\\t\\t\\t\\tdistance: _nights,\\n\\t\\t\\t\\tnights: _distance,\\n\\t\\t\\t\\ttotal: _total\\n\\t\\t\\t});\\n\\t\\t}\\n\\n\\t\\ts_lastResponse = response;\\n\\t\\ts_lastError = err;\\n\\t\\temit Response(requestId, s_lastResponse, s_lastError);\\n\\t}\\n}\\n\",\"keccak256\":\"0xa1ed404b67998a81aa35855c2341e99c32cbc2d79a483b89b4ede54b66c1ea7e\",\"license\":\"MIT\"},\"contracts/Carbon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC20/ERC20.sol';\\nimport '@openzeppelin/contracts/token/ERC20/extensions/ERC20Burnable.sol';\\nimport '@openzeppelin/contracts/utils/Strings.sol';\\n\\nimport './Calculator.sol';\\nimport './Certificate.sol';\\n\\nimport './enums/enums.sol';\\nimport './interfaces/ILinkToken.sol';\\nimport './interfaces/ICertificate.sol';\\nimport './interfaces/IPUSHCommInterface.sol';\\nimport './interfaces/ITCO2Faucet.sol';\\nimport './interfaces/ITCO2Token.sol';\\n\\ncontract Carbon is ERC20, ERC20Burnable, Ownable {\\n\\tusing Strings for address;\\n\\tusing Strings for uint;\\n\\n\\tstruct Travel {\\n\\t\\tuint256 distance;\\n\\t\\tuint256 nights;\\n\\t\\tuint256 total;\\n\\t}\\n\\n\\tITCO2Faucet public TCO2FaucetExtense;\\n\\tITCO2Token public TCO2TokenExtense;\\n\\n\\taddress public EPNS_COMM_ADDRESS;\\n\\taddress public LINK_TOKEN_ADDRESS;\\n\\taddress public CARBON_CERTIFICATE_ADDRESS;\\n\\taddress public CARBON_CALCULATOR_ADDRESS;\\n\\n\\tuint256 public TCO2TokensInContract;\\n\\tuint256 public carbonTokensMinted;\\n\\n\\tevent BougthCarbonCredits(address indexed buyer, uint256 amount);\\n\\tevent RetiredCarbonCredits(\\n\\t\\taddress indexed buyer,\\n\\t\\tuint256 amount,\\n\\t\\tuint256 certificateId\\n\\t);\\n\\n\\tconstructor(\\n\\t\\taddress _TCO2Faucet,\\n\\t\\taddress _TCO2Token,\\n\\t\\taddress _EPNS_COMM_ADDRESS,\\n\\t\\taddress _LINK_TOKEN_ADDRESS,\\n\\t\\tstring[] memory _certificateArgs,\\n\\t\\taddress[] memory _calculatorArgs\\n\\t) ERC20('carbon', 'CARBON') Ownable(msg.sender) {\\n\\t\\trequire(\\n\\t\\t\\t_certificateArgs.length == 3,\\n\\t\\t\\t'_certificateArgs should be of length 3'\\n\\t\\t);\\n\\n\\t\\trequire(\\n\\t\\t\\t_calculatorArgs.length == 1,\\n\\t\\t\\t'_calculatorArgs should be of length 1'\\n\\t\\t);\\n\\n\\t\\tTCO2FaucetExtense = ITCO2Faucet(_TCO2Faucet);\\n\\t\\tTCO2TokenExtense = ITCO2Token(_TCO2Token);\\n\\n\\t\\tEPNS_COMM_ADDRESS = _EPNS_COMM_ADDRESS;\\n\\t\\tLINK_TOKEN_ADDRESS = _LINK_TOKEN_ADDRESS;\\n\\n\\t\\tCertificate certificate = new Certificate(\\n\\t\\t\\t_certificateArgs[uint(certificateArgs.name)],\\n\\t\\t\\t_certificateArgs[uint(certificateArgs.symbol)],\\n\\t\\t\\t_certificateArgs[uint(certificateArgs.baseURI)]\\n\\t\\t);\\n\\n\\t\\tCalculator calculator = new Calculator(\\n\\t\\t\\t_calculatorArgs[uint(calculatorArgs.router)]\\n\\t\\t);\\n\\n\\t\\tCARBON_CERTIFICATE_ADDRESS = address(certificate);\\n\\t\\tCARBON_CALCULATOR_ADDRESS = address(calculator);\\n\\n\\t\\tILinkTokenInterface(_LINK_TOKEN_ADDRESS).approve(\\n\\t\\t\\taddress(calculator),\\n\\t\\t\\ttype(uint256).max\\n\\t\\t);\\n\\t}\\n\\n\\treceive() external payable {}\\n\\n\\tfunction buyCarbonCredits(address _buyer, uint256 _amount) public onlyOwner {\\n\\t\\trequire(_amount > 0, 'Amount should be greater than 0');\\n\\n\\t\\tuint256 totalCarbonAfterMint = carbonTokensMinted + _amount;\\n\\t\\tif (TCO2TokensInContract < totalCarbonAfterMint) {\\n\\t\\t\\tuint256 amountToWithdraw = totalCarbonAfterMint - TCO2TokensInContract;\\n\\t\\t\\tTCO2FaucetExtense.withdraw(address(TCO2TokenExtense), amountToWithdraw);\\n\\t\\t\\tTCO2TokensInContract += amountToWithdraw;\\n\\t\\t}\\n\\n\\t\\t_mint(_buyer, _amount);\\n\\t\\tcarbonTokensMinted += _amount;\\n\\n\\t\\temit BougthCarbonCredits(_buyer, _amount);\\n\\t}\\n\\n\\tfunction retireCarbonCredits(\\n\\t\\taddress _buyer,\\n\\t\\tuint256 _amount\\n\\t) public onlyOwner {\\n\\t\\trequire(_amount > 0, 'Amount should be greater than 0');\\n\\t\\trequire(_amount <= balanceOf(_buyer), 'Insufficient CARBON tokens');\\n\\n\\t\\tif (TCO2TokensInContract >= _amount) {\\n\\t\\t\\tTCO2TokenExtense.retire(_amount);\\n\\t\\t\\tTCO2TokensInContract -= _amount;\\n\\t\\t} else {\\n\\t\\t\\tuint256 amountFromOwner = _amount - TCO2TokensInContract;\\n\\t\\t\\tTCO2FaucetExtense.withdraw(address(TCO2TokenExtense), amountFromOwner);\\n\\t\\t\\tTCO2TokenExtense.retire(_amount);\\n\\t\\t\\tTCO2TokensInContract = 0;\\n\\t\\t}\\n\\n\\t\\tcarbonTokensMinted -= _amount;\\n\\t\\tburn(_amount);\\n\\n\\t\\tuint256 certificateId = ICertficate(CARBON_CERTIFICATE_ADDRESS).safeMint(\\n\\t\\t\\t_buyer,\\n\\t\\t\\t_amount\\n\\t\\t);\\n\\t\\tIPUSHCommInterface(EPNS_COMM_ADDRESS).sendNotification(\\n\\t\\t\\t0xaA7880DB88D8e051428b5204817e58D8327340De, // from channel\\n\\t\\t\\t_buyer,\\n\\t\\t\\tbytes(\\n\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t'0',\\n\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t'3',\\n\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t'Congrats!',\\n\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t'You just received an offset certificate! ',\\n\\t\\t\\t\\t\\t'Your offset was ',\\n\\t\\t\\t\\t\\t(_amount / (10 ** uint(decimals()))).toString(),\\n\\t\\t\\t\\t\\t' CO2 Tons'\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\t\\temit RetiredCarbonCredits(_buyer, _amount, certificateId);\\n\\t}\\n\\n\\t// TODO: Calculate and Offset carbon footprint\\n\\n\\tfunction calculateTravelFootprint(\\n\\t\\tstring memory _source,\\n\\t\\tbytes memory _encryptedSecretsUrls,\\n\\t\\tuint8 _donHostedSecretsSlotID,\\n\\t\\tuint64 _donHostedSecretsVersion,\\n\\t\\tstring[] memory _args,\\n\\t\\tbytes[] memory _bytesArgs,\\n\\t\\tuint64 _subscriptionId,\\n\\t\\tuint32 _gasLimit,\\n\\t\\tbytes32 _jobId\\n\\t) public onlyOwner returns (Travel memory carbonFootprintTravel) {\\n\\t\\tCalculator calculator = Calculator(CARBON_CALCULATOR_ADDRESS);\\n\\n\\t\\tbytes32 requestId;\\n\\n\\t\\trequestId = calculator.sendRequest(\\n\\t\\t\\t_source,\\n\\t\\t\\t_encryptedSecretsUrls,\\n\\t\\t\\t_donHostedSecretsSlotID,\\n\\t\\t\\t_donHostedSecretsVersion,\\n\\t\\t\\t_args,\\n\\t\\t\\t_bytesArgs,\\n\\t\\t\\t_subscriptionId,\\n\\t\\t\\t_gasLimit,\\n\\t\\t\\t_jobId\\n\\t\\t);\\n\\n\\t\\t(uint256 distance, uint256 nights, uint256 total) = calculator.travels(\\n\\t\\t\\trequestId\\n\\t\\t);\\n\\t\\tTravel memory carbonFootprintTravel = Travel({\\n\\t\\t\\tdistance: distance,\\n\\t\\t\\tnights: nights,\\n\\t\\t\\ttotal: total\\n\\t\\t});\\n\\n\\t\\treturn carbonFootprintTravel;\\n\\t}\\n\\n\\tfunction withdrawTCO2Tokens() public onlyOwner {\\n\\t\\tuint256 amount = TCO2TokenExtense.balanceOf(address(this));\\n\\t\\trequire(TCO2TokenExtense.transfer(msg.sender, amount), 'Transfer failed');\\n\\t}\\n\\n\\tfunction withdrawFunds() public onlyOwner {\\n\\t\\t(bool response /*bytes memory data*/, ) = msg.sender.call{\\n\\t\\t\\tvalue: address(this).balance\\n\\t\\t}('');\\n\\t\\trequire(response, 'Transfer failed');\\n\\t}\\n\\n\\tfunction transfer(\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) public virtual override returns (bool) {\\n\\t\\taddress owner = _msgSender();\\n\\t\\t_transfer(owner, to, amount);\\n\\n\\t\\tIPUSHCommInterface(EPNS_COMM_ADDRESS).sendNotification(\\n\\t\\t\\t0xaA7880DB88D8e051428b5204817e58D8327340De, // from channel\\n\\t\\t\\tto,\\n\\t\\t\\tbytes(\\n\\t\\t\\t\\tstring(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t'0',\\n\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\t'3',\\n\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\t'Congrats!',\\n\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\towner.toHexString(),\\n\\t\\t\\t\\t\\t\\t' transferred ',\\n\\t\\t\\t\\t\\t\\t(amount / (10 ** uint(decimals()))).toString(),\\n\\t\\t\\t\\t\\t\\t' CARBON to you!'\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\treturn true;\\n\\t}\\n\\n\\tfunction transferFrom(\\n\\t\\taddress from,\\n\\t\\taddress to,\\n\\t\\tuint256 amount\\n\\t) public virtual override returns (bool) {\\n\\t\\taddress spender = _msgSender();\\n\\t\\t_spendAllowance(from, spender, amount);\\n\\t\\t_transfer(from, to, amount);\\n\\n\\t\\tIPUSHCommInterface(EPNS_COMM_ADDRESS).sendNotification(\\n\\t\\t\\t0xaA7880DB88D8e051428b5204817e58D8327340De,\\n\\t\\t\\tto,\\n\\t\\t\\tbytes(\\n\\t\\t\\t\\tstring(\\n\\t\\t\\t\\t\\tabi.encodePacked(\\n\\t\\t\\t\\t\\t\\t'0',\\n\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\t'3',\\n\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\t'Congrats!',\\n\\t\\t\\t\\t\\t\\t'+',\\n\\t\\t\\t\\t\\t\\tspender.toHexString(),\\n\\t\\t\\t\\t\\t\\t' transferred ',\\n\\t\\t\\t\\t\\t\\t(amount / (10 ** uint(decimals()))).toString(),\\n\\t\\t\\t\\t\\t\\t' CARBON to you!'\\n\\t\\t\\t\\t\\t)\\n\\t\\t\\t\\t)\\n\\t\\t\\t)\\n\\t\\t);\\n\\n\\t\\treturn true;\\n\\t}\\n}\\n\",\"keccak256\":\"0x3f5c8f55db10300bb2bc24873f004daf70beb371851d6779e9cfeeef4ef9a20f\",\"license\":\"MIT\"},\"contracts/Certificate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/access/Ownable.sol';\\nimport '@openzeppelin/contracts/token/ERC721/ERC721.sol';\\n\\ncontract Certificate is ERC721, Ownable {\\n\\tuint256 public tokenIdCounter;\\n\\tstring baseURI;\\n\\n\\tconstructor(\\n\\t\\tstring memory _name,\\n\\t\\tstring memory _symbol,\\n\\t\\tstring memory _baseURI\\n\\t) ERC721(_name, _symbol) Ownable(msg.sender) {\\n\\t\\tbaseURI = _baseURI;\\n\\t}\\n\\n\\tfunction safeMint(address _to, uint256 _amount) public onlyOwner returns (uint256) {\\n\\t\\tuint256 tokenId = tokenIdCounter;\\n\\t\\ttokenIdCounter++;\\n\\n\\t\\t_safeMint(_to, tokenId);\\n\\t\\treturn tokenId;\\n\\t}\\n\\n\\tfunction approve(address, uint256) public pure override {\\n\\t\\trevert(\\\"Approve isn't allowed\\\");\\n\\t}\\n\\n\\tfunction setApprovalForAll(address, bool) public pure override {\\n\\t\\trevert(\\\"setApprovalForAll isn't allowed\\\");\\n\\t}\\n\\n\\tfunction transferFrom(address, address, uint256) public pure override {\\n\\t\\trevert(\\\"transferFrom isn't allowed\\\");\\n\\t}\\n\\n\\tfunction safeTransferFrom(\\n\\t\\taddress,\\n\\t\\taddress,\\n\\t\\tuint256,\\n\\t\\tbytes memory\\n\\t) public pure override {\\n\\t\\trevert(\\\"safeTransferFrom isn't allowed\\\");\\n\\t}\\n\\n\\tfunction tokenURI(\\n\\t\\tuint256 tokenId\\n\\t) public view override returns (string memory) {\\n\\t\\t_requireOwned(tokenId);\\n\\n\\t\\treturn baseURI;\\n\\t}\\n}\\n\",\"keccak256\":\"0x0f4dc6dbaba1dba07d27d47124f46dc1475d3d00c48dce0a7fe21eed3afb9a97\",\"license\":\"MIT\"},\"contracts/enums/enums.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nenum certificateArgs {\\n\\tname,\\n\\tsymbol,\\n\\tbaseURI\\n}\\n\\nenum calculatorArgs {\\n\\trouter\\n}\\n\",\"keccak256\":\"0xab9670664feb454cc08aed506f592059cca3aa7dc02252799774dc169bbd8e20\",\"license\":\"MIT\"},\"contracts/interfaces/ICertificate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/token/ERC721/IERC721.sol';\\nimport '@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol';\\n\\ninterface ICertficate is IERC721, IERC721Metadata {\\n\\tfunction safeMint(address to, uint256 _amount) external returns (uint256);\\n}\\n\",\"keccak256\":\"0x92fa5701e6728098c3d50901f1870bdb942714602633b82bd1699c9e11c31d7e\",\"license\":\"MIT\"},\"contracts/interfaces/ILinkToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\ninterface ILinkTokenInterface is IERC20 {}\\n\",\"keccak256\":\"0x8d7bcaa20306500cc9cc39889da7a95e2aaea16abba5a80b8cc2e2407b4b697b\",\"license\":\"MIT\"},\"contracts/interfaces/IPUSHCommInterface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n// PUSH Comm Contract Interface\\ninterface IPUSHCommInterface {\\n\\tfunction sendNotification(\\n\\t\\taddress _channel,\\n\\t\\taddress _recipient,\\n\\t\\tbytes calldata _identity\\n\\t) external;\\n}\\n\",\"keccak256\":\"0xf979e927a870830d182df45e2b1545520d7781c0e2012738b115a709b1b9e95a\",\"license\":\"MIT\"},\"contracts/interfaces/ITCO2Faucet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\n/**\\n * Network: Mumbai\\n * name: TCO2Faucet\\n * Address: 0x996b39698CF96A70B7a7005B5d1924a66C5E8f0e\\n **/\\n\\ninterface ITCO2Faucet {\\n\\tfunction withdraw(address _erc20Address, uint256 _amount) external;\\n}\\n\",\"keccak256\":\"0xb454d819194ae4db1cec5e610b9d8a76e9dd1fa8c25a2e14f69467f41e9b4a3f\",\"license\":\"MIT\"},\"contracts/interfaces/ITCO2Token.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.19;\\n\\nimport '@openzeppelin/contracts/token/ERC20/IERC20.sol';\\n\\n/**\\n * Network: Mumbai\\n * name: TCO2Token\\n * Address: 0xa5831eb637dff307395b5183c86B04c69C518681\\n **/\\n\\ninterface ITCO2Token is IERC20 {\\n\\tfunction retire(uint256 amount) external;\\n}\\n\",\"keccak256\":\"0x0dd5a335d7039bb3a0dbe6392dfea5c91811483937f9e995fc4aedd10cdde398\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x6080604052346200046857620058bd8038038091620000208260806200088d565b60803960c081126200046857620000386080620008b1565b906200004560a0620008b1565b916200005260c0620008b1565b916200005f60e0620008b1565b6101005192906001600160401b038411620004685760808301609f85011215620004685783608001516200009381620008c6565b94620000a360405196876200088d565b818652602086016080860160a0600585901b84010111620004685760a08201905b60a0600585901b8401018210620007cc575050610120519150506001600160401b03811162000468576080019280608001601f85011215620004685783516200010d81620008c6565b946200011d60405196876200088d565b81865260208087019260051b8201019260800183116200046857602001905b828210620007b157505050604051620001558162000871565b600681526531b0b93137b760d11b602082015260405190620001778262000871565b600682526521a0a92127a760d11b60208301528051906001600160401b038211620004825760035490600182811c92168015620007a6575b6020831014620006785781601f84931162000734575b50602090601f8311600114620006a55760009262000699575b50508160011b916000199060031b1c1916176003555b8051906001600160401b038211620004825760045490600182811c921680156200068e575b6020831014620006785781601f84931162000606575b50602090601f831160011462000577576000926200056b575b50508160011b916000199060031b1c1916176004555b331562000552576005549560018060a01b031995338789161760055560405160018060a01b0398893391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a360038751036200050157506001855103620004ae5787809492818094168960065416176006551687600754161760075516856008541617600855169182846009541617600955620002ff8162000903565b519080516001101562000498576040810151908051600210156200049857606001516040519261123a91828501916001600160401b0383118684101762000482578594620003656200037492620003839662004683893960608652606086019062000911565b90848203602086015262000911565b91604081840391015262000911565b03906000f090811562000476576200039c859162000903565b5160405191166121df8083016001600160401b0381118482101762000482576020928492620024a4843981520301906000f09283156200047657846020946000966044941683600a541617600a55168091600b541617600b55604051948593849263095ea7b360e01b84526004840152811960248401525af18015620004765762000432575b604051611b6b9081620009398239f35b6020813d6020116200046d575b816200044e602093836200088d565b810103126200046857518015150362000468573862000422565b600080fd5b3d91506200043f565b6040513d6000823e3d90fd5b634e487b7160e01b600052604160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b60405162461bcd60e51b815260206004820152602560248201527f5f63616c63756c61746f72417267732073686f756c64206265206f66206c656e604482015264677468203160d81b6064820152608490fd5b62461bcd60e51b815260206004820152602660248201527f5f6365727469666963617465417267732073686f756c64206265206f66206c656044820152656e677468203360d01b6064820152608490fd5b604051631e4fbdf760e01b815260006004820152602490fd5b01519050388062000248565b6004600090815293507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b91905b601f1984168510620005ea576001945083601f19811610620005d0575b505050811b016004556200025e565b015160001960f88460031b161c19169055388080620005c1565b81810151835560209485019460019093019290910190620005a4565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c81016020851062000670575b90849392915b601f830160051c82018110620006605750506200022f565b6000815585945060010162000648565b508062000642565b634e487b7160e01b600052602260045260246000fd5b91607f169162000219565b015190503880620001de565b6003600090815293507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b91905b601f198416851062000718576001945083601f19811610620006fe575b505050811b01600355620001f4565b015160001960f88460031b161c19169055388080620006ef565b81810151835560209485019460019093019290910190620006d2565b60036000529091507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f840160051c8101602085106200079e575b90849392915b601f830160051c820181106200078e575050620001c5565b6000815585945060010162000776565b508062000770565b91607f1691620001af565b60208091620007c084620008b1565b8152019101906200013c565b81516001600160401b03811162000468576080880160bf858301011215620004685760a084820101516001600160401b0381116200085c57604051926200081e601f8301601f1916602001856200088d565b81845260808a0160c0878501840101116200046857602093849384936200084e91838601908a0160c001620008de565b8152019201919050620000c4565b60246000634e487b7160e01b81526041600452fd5b604081019081106001600160401b038211176200048257604052565b601f909101601f19168101906001600160401b038211908210176200048257604052565b51906001600160a01b03821682036200046857565b6001600160401b038111620004825760051b60200190565b60005b838110620008f25750506000910152565b8181015183820152602001620008e1565b805115620004985760200190565b906020916200092c81518092818552858086019101620008de565b601f01601f191601019056fe608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c90816302598e0a146113d85750806306fdde0314611316578063095ea7b31461126357806318160ddd1461124557806322a0bb6b1461121c57806323b872dd146111dd57806324600fc314611188578063313ce5671461116c57806342966c681461114e57806348a3b4a4146111255780634da2d12a146110fc57806370a08231146110c4578063715018a61461106757806379cc6790146110365780637f0924841461100d5780638a5b44b314610ef55780638da5cb5b14610ecc57806391a89a2914610ea357806395d89b4114610d92578063a9059cbb14610c2e578063abc3e88b14610865578063c37964bd14610847578063d8f1d72414610829578063dd62ed3e146107de578063ded7c1301461037b578063e75ad115146101e05763f2fde38b0361000f57346101dd5760203660031901126101dd57610168611445565b610170611554565b6001600160a01b039081169081156101c457600554826bffffffffffffffffffffffff60a01b821617600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b80fd5b50346101dd5760403660031901126101dd576101fa611445565b60243590610206611554565b61021182151561172e565b61021d82600d54611638565b600c548181106102da575b50506001600160a01b03169081156102c15760208161026a7fa46287cd6870c6d05612bb95b96833337e1e8a0ccea8be539c860dee7ac5f6e193600254611638565b6002558385528482526040852081815401905583857fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051858152a36102b481600d54611638565b600d55604051908152a280f35b60405163ec442f0560e01b815260048101849052602490fd5b6102e39161177a565b60065460075485916001600160a01b039182169116803b156103775760405163f3fef3a360e01b81526001600160a01b039290921660048301526024820184905282908290604490829084905af1801561036c57610354575b505061034a90600c54611638565b600c553880610228565b61035d90611476565b61036857833861033c565b8380fd5b6040513d84823e3d90fd5b8280fd5b50346101dd576101203660031901126101dd576004356001600160401b0381116106a6576103ad9036906004016114f6565b6024356001600160401b038111610377576103cc9036906004016114f6565b60443560ff81168103610368576064356001600160401b03811681036107da576084356001600160401b0381116107d657366023820112156107d65780600401356104168161153d565b9161042460405193846114ba565b818352602083019160051b81016024018236821161075e5760248301905b8282106107a357505050506001600160401b0360a4351161079f5736602360a43501121561079f5760a435600401359361047b8561153d565b9061048960405192836114ba565b8582526020820180963660248260051b60a43501011161079b57602460a43501915b60248260051b60a435010183106107625750505060c435936001600160401b038516850361075e578960e4359663ffffffff881688036106a657916001600160401b03610124979593836040809e9c9997959e516105088161149f565b828152826020820152015261051b611554565b60ff61056160018060a01b03600b54169d61054f6040519e8f9d8e6352a81eeb60e01b815261012060048201520190611420565b8c81036003190160248e015290611420565b941660448a015216606488015260031987830301608488015251808252602082019160208260051b82010194928c915b8383106107255750505050506003198583030160a486015251808252602082019160208260051b82010194928a915b8383106106f05750505050509063ffffffff6020946001600160401b0385941660c48501521660e4830152610104803590830152038186865af180156106e55783906106b2575b6060915060246040518094819363e3e784a560e01b835260048301525afa801561036c5782918390849261066a575b5060609350604080516106488161149f565b8481526020810192835201918252604051928352516020830152516040820152f35b925050506060813d82116106aa575b81610686606093836114ba565b810103126106a65760609150805160406020830151920151909184610636565b5080fd5b3d9150610679565b506020813d6020116106dd575b816106cc602093836114ba565b810103126103775760609051610607565b3d91506106bf565b6040513d85823e3d90fd5b9193979650919394602080610711600193601f198682030187528b51611420565b9901930193019092889697959492936105c0565b91939697999850919394602080610748600193601f198682030187528a51611420565b98019301930190928a9899979695949293610591565b8980fd5b8235906001600160401b038211610797576020809161078a60249485369160a43501016114f6565b81520193019290506104ab565b8c80fd5b8a80fd5b8680fd5b81356001600160401b0381116107d2576020916107c78392602436918901016114f6565b815201910190610442565b8b80fd5b8580fd5b8480fd5b50346101dd5760403660031901126101dd5760406020916107fd611445565b610805611460565b6001600160a01b039182168352600185528383209116825283522054604051908152f35b50346101dd57806003193601126101dd576020600c54604051908152f35b50346101dd57806003193601126101dd576020600d54604051908152f35b50346101dd5760403660031901126101dd5761087f611445565b60243561088a611554565b61089581151561172e565b60018060a01b03908183169283855260209085825260408620548311610be957600c54869190848110610b1757508460075416803b1561037757828091602460405180948193633790cf5760e01b83528a60048401525af19081156106e5578391610b03575b505061090984600c5461177a565b600c555b61091984600d5461177a565b600d556109268433611580565b600a54604051632851206560e21b81526001600160a01b0383166004820152602481018690529590849087906044908290879086165af19586156106e5578396610ad4575b506008541690610984670de0b6b3a764000086046117c6565b610a4f60706040518093600360fc1b89830152602b60f81b806021840152603360f81b602284015280602384015268436f6e67726174732160b81b6024840152602d8301527f596f75206a75737420726563656976656420616e206f66667365742063657274602e83015268034b334b1b0ba3290960bd1b604e8301526f02cb7bab91037b33339b2ba103bb0b9960851b6057830152610a2d815180928b6067860191016113fd565b81016820434f3220546f6e7360b81b60678201520360508101845201826114ba565b823b1561036857610a799284928360405180968195829463ba3d69d760e01b845260048401611787565b03925af1801561036c57610abc575b5050907fd01c6570076b5796ea5b39d13cb939955b5d2ec43f5ba7ee52e6cd5613823aad926040928351928352820152a280f35b610ac890939293611476565b6107da57908438610a88565b9095508381813d8311610afc575b610aec81836114ba565b810103126103775751943861096b565b503d610ae2565b610b0c90611476565b6106a65781386108fb565b610b239192508461177a565b86856006541691866007541692803b156103775760405163f3fef3a360e01b81526001600160a01b0394909416600485015260248401919091528290604490829084905af18015610bde57610bcb575b5085908460075416803b1561037757828091602460405180948193633790cf5760e01b83528a60048401525af19081156106e5578391610bb7575b50600c5561090d565b610bc090611476565b6106a6578138610bae565b610bd790969196611476565b9438610b73565b6040513d89823e3d90fd5b60405162461bcd60e51b815260048101839052601a60248201527f496e73756666696369656e7420434152424f4e20746f6b656e730000000000006044820152606490fd5b50346101dd5760403660031901126101dd57610c48611445565b9060243591610c5883823361196c565b6008546001600160a01b031690610d30604a610c86670de0b6b3a7640000610c7f33611a31565b97046117c6565b95604051968791600360fc1b6020840152602b60f81b806021850152603360f81b602285015280602385015268436f6e67726174732160b81b6024850152602d840152610cdd815180926020602e870191016113fd565b82016c0103a3930b739b332b93932b21609d1b602e820152610d09825180936020603b850191016113fd565b016e20434152424f4e20746f20796f752160881b603b82015203602a8101875201856114ba565b813b1561037757928291610d5b948360405180978195829463ba3d69d760e01b845260048401611787565b03925af1908115610d865750610d77575b602060405160018152f35b610d8090611476565b38610d6c565b604051903d90823e3d90fd5b50346101dd57806003193601126101dd57604051908060045491600183811c92818516948515610e99575b6020958686108114610e8557858852879493929187908215610e63575050600114610e09575b5050610df1925003836114ba565b610e05604051928284938452830190611420565b0390f35b90859250600482527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b858310610e4b575050610df193508201013880610de3565b80548389018501528794508693909201918101610e33565b9250935050610df194915060ff191682840152151560051b8201013880610de3565b634e487b7160e01b83526022600452602483fd5b93607f1693610dbd565b50346101dd57806003193601126101dd576006546040516001600160a01b039091168152602090f35b50346101dd57806003193601126101dd576005546040516001600160a01b039091168152602090f35b50346101dd57806003193601126101dd57610f0e611554565b6007546040516370a0823160e01b81523060048201528291602091906001600160a01b03168282602481845afa80156110025783928591610fca575b5060405163a9059cbb60e01b8152336004820152602481019190915293849190829081604481015b03925af19081156106e5578391610f91575b83610f8e8361192e565b80f35b905081813d8311610fc3575b610fa781836114ba565b810103126106a6575180151581036106a657610f8e9038610f84565b503d610f9d565b8381939492503d8311610ffb575b610fe281836114ba565b81010312610ff65751829190610f72610f4a565b505050fd5b503d610fd8565b6040513d86823e3d90fd5b50346101dd57806003193601126101dd57600a546040516001600160a01b039091168152602090f35b50346101dd5760403660031901126101dd57610f8e611053611445565b6024359061106282338361165b565b611580565b50346101dd57806003193601126101dd57611080611554565b600580546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101dd5760203660031901126101dd576020906040906001600160a01b036110ec611445565b1681528083522054604051908152f35b50346101dd57806003193601126101dd57600b546040516001600160a01b039091168152602090f35b50346101dd57806003193601126101dd576008546040516001600160a01b039091168152602090f35b50346101dd5760203660031901126101dd57610f8e60043533611580565b50346101dd57806003193601126101dd57602060405160128152f35b50346101dd57806003193601126101dd576111a1611554565b610f8e8180808047335af13d156111d8573d6111bc816114db565b906111ca60405192836114ba565b81528360203d92013e61192e565b61192e565b50346101dd5760603660031901126101dd57610c58906111fb611445565b611203611460565b92839160443594859161121783338361165b565b61196c565b50346101dd57806003193601126101dd576007546040516001600160a01b039091168152602090f35b50346101dd57806003193601126101dd576020600254604051908152f35b50346101dd5760403660031901126101dd5761127d611445565b6024359033156112fd576001600160a01b03169182156112e55760408291338152600160205281812085825260205220556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b60249060405190634a1406b160e11b82526004820152fd5b60405163e602df0560e01b815260048101849052602490fd5b50346101dd57806003193601126101dd57604051908060035491600183811c928185169485156113ce575b6020958686108114610e8557858852879493929187908215610e63575050600114611374575050610df1925003836114ba565b90859250600382527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8583106113b6575050610df193508201013880610de3565b8054838901850152879450869390920191810161139e565b93607f1693611341565b9050346106a657816003193601126106a6576009546001600160a01b03168152602090f35b60005b8381106114105750506000910152565b8181015183820152602001611400565b90602091611439815180928185528580860191016113fd565b601f01601f1916010190565b600435906001600160a01b038216820361145b57565b600080fd5b602435906001600160a01b038216820361145b57565b6001600160401b03811161148957604052565b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761148957604052565b90601f801991011681019081106001600160401b0382111761148957604052565b6001600160401b03811161148957601f01601f191660200190565b81601f8201121561145b5780359061150d826114db565b9261151b60405194856114ba565b8284526020838301011161145b57816000926020809301838601378301015290565b6001600160401b0381116114895760051b60200190565b6005546001600160a01b0316330361156857565b60405163118cdaa760e01b8152336004820152602490fd5b906001600160a01b03821690811561161f57600092828452836020526040842054908282106115ed5750817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926020928587528684520360408620558060025403600255604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101829052606490fd5b604051634b637e8f60e11b815260006004820152602490fd5b9190820180921161164557565b634e487b7160e01b600052601160045260246000fd5b9160018060a01b03809316916000938385526001602052604093848620918316918287526020528486205492600019840361169a575b50505050505050565b8484106116fe575080156116e65781156116ce57855260016020528385209085526020520391205538808080808080611691565b8451634a1406b160e11b815260048101879052602490fd5b845163e602df0560e01b815260048101879052602490fd5b8551637dc7a0d960e11b81526001600160a01b039190911660048201526024810184905260448101859052606490fd5b1561173557565b60405162461bcd60e51b815260206004820152601f60248201527f416d6f756e742073686f756c642062652067726561746572207468616e2030006044820152606490fd5b9190820391821161164557565b73aa7880db88d8e051428b5204817e58d8327340de81526001600160a01b0390911660208201526060604082018190526117c392910190611420565b90565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015611920575b506d04ee2d6d415b85acef810000000080831015611911575b50662386f26fc1000080831015611902575b506305f5e100808310156118f3575b50612710808310156118e4575b5060648210156118d4575b600a809210156118ca575b6001908160218186019561185f876114db565b9661186d60405198896114ba565b80885261187c601f19916114db565b01366020890137860101905b611894575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156118c557919082611888565b61188d565b916001019161184c565b9190606460029104910191611841565b60049193920491019138611836565b60089193920491019138611829565b6010919392049101913861181a565b60209193920491019138611808565b6040935081049150386117ef565b1561193557565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b916001600160a01b0380841692831561161f5716928315611a1857600090838252816020526040822054908382106119e6575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051906001600160a01b031680611a488361149f565b602a835260208084016040368237845115611b1f5760309053835190600191821015611b1f5790607860218601536029915b818311611aab57505050611a8c575090565b6044906040519063e22e27eb60e01b8252600482015260146024820152fd5b909192600f81166010811015611b0a578651851015611b0a576f181899199a1a9b1b9c1cb0b131b232b360811b901a86850183015360041c928015611af557600019019190611a7a565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220ea96270c9ebb181ce3cc642cc27ede41ff7a255123fb2705c50fa205de740eb664736f6c6343000814003360a0346100d057601f6121df38819003918201601f19168301916001600160401b038311848410176100d5578084926020946040528339810103126100d057516001600160a01b038116908190036100d057608052331561008b57600080546001600160a01b031916331790556040516120f390816100ec823960805181818161010a0152610b0d0152f35b60405162461bcd60e51b815260206004820152601860248201527f43616e6e6f7420736574206f776e657220746f207a65726f00000000000000006044820152606490fd5b600080fd5b634e487b7160e01b600052604160045260246000fdfe608060405260048036101561001357600080fd5b6000803560e01c9182630ca76175146100bc57505080633944ea3a146100b75780634b0795a8146100b257806352a81eeb146100ad57806379ba5097146100a85780638da5cb5b146100a35780639681096f1461009e578063b1e2174914610099578063e3e784a5146100945763f2fde38b1461008f57600080fd5b6108b3565b610870565b610852565b6107df565b6107b6565b6106fa565b610637565b6104bc565b6103e9565b3461026b57606036600319011261026b578035906001600160401b03602435818111610267576100ef9036908401610300565b90604435908111610267576101079036908401610300565b917f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031633036102585780549084820361023c57508161015c9161016194935190816101ba575b5050611d8d565b611e64565b807f7873807bf6ddc50401cd3d29bbe0decee23fd4d68d273f4b5eb83cded4d2f1726040518061019081611fcd565b0390a27f85e1543bf2f84fe80c6badbce3648c8539ad1df4d2b3d822938ca0538be727e68280a280f35b61021a6101d260206102359486010160208601610a9a565b916101db6102e1565b926ec097ce7bc90715b34b9f100000000081048452670de0b6b3a764000090818082040660208601520660408401526000526005602052604060002090565b90604060029180518455602081015160018501550151910155565b8680610155565b60405163d068bf5b60e01b815290810185815281906020010390fd5b60405163c6829f8360e01b8152fd5b8480fd5b5080fd5b634e487b7160e01b600052604160045260246000fd5b60e081019081106001600160401b038211176102a057604052565b61026f565b604081019081106001600160401b038211176102a057604052565b90601f801991011681019081106001600160401b038211176102a057604052565b60405190606082018281106001600160401b038211176102a057604052565b81601f82011215610356578035906001600160401b0382116102a05760405192610334601f8401601f1916602001856102c0565b8284526020838301011161035657816000926020809301838601378301015290565b600080fd5b90600182811c9216801561038b575b602083101461037557565b634e487b7160e01b600052602260045260246000fd5b91607f169161036a565b919082519283825260005b8481106103c1575050826000602080949584010152601f8019910116010190565b6020818301810151848301820152016103a0565b9060206103e6928181520190610395565b90565b34610356576000806003193601126104b957604051908060035461040c8161035b565b8085529160019180831690811561048f5750600114610446575b61044285610436818703826102c0565b604051918291826103d5565b0390f35b92506003835260008051602061209e8339815191525b82841061047757505050810160200161043682610442610426565b8054602085870181019190915290930192810161045c565b8695506104429693506020925061043694915060ff191682840152151560051b8201019293610426565b80fd5b34610356576000806003193601126104b95760405190806002546104df8161035b565b8085529160019180831690811561048f57506001146105085761044285610436818703826102c0565b92506002835260008051602061207e8339815191525b82841061053957505050810160200161043682610442610426565b8054602085870181019190915290930192810161051e565b6044359060ff8216820361035657565b606435906001600160401b038216820361035657565b60c435906001600160401b038216820361035657565b6001600160401b0381116102a05760051b60200190565b9080601f83011215610356578135906105bc8261058d565b926105ca60405194856102c0565b828452602092838086019160051b8301019280841161035657848301915b8483106105f85750505050505090565b82356001600160401b03811161035657869161061984848094890101610300565b8152019201916105e8565b60e4359063ffffffff8216820361035657565b3461035657610120366003190112610356576001600160401b0360043581811161035657610669903690600401610300565b9060243581811161035657610682903690600401610300565b9161068b610551565b92610694610561565b93608435848111610356576106ad9036906004016105a4565b9460a43594851161035657610442956106cd6106ea9636906004016105a4565b916106d6610577565b936106df610624565b9561010435976109c4565b6040519081529081906020820190565b34610356576000806003193601126104b9576001546001600160a01b0390811633036107785781546001600160a01b0316600080546001600160a01b0319163317905590600180546001600160a01b03191690553391167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b60405162461bcd60e51b815260206004820152601660248201527526bab9ba10313290383937b837b9b2b21037bbb732b960511b6044820152606490fd5b34610356576000366003190112610356576000546040516001600160a01b039091168152602090f35b34610356576080366003190112610356576001600160401b0360043581811161035657610810903690600401610300565b906024359081168103610356576044359163ffffffff83168303610356576020926108469261083d610972565b60643592610ab5565b80600455604051908152f35b34610356576000366003190112610356576020600454604051908152f35b3461035657602036600319011261035657600435600052600560205260606040600020805490600260018201549101549060405192835260208301526040820152f35b34610356576020366003190112610356576004356001600160a01b03811690819003610356576108e1610972565b33811461092d57600180546001600160a01b031916821790556000546001600160a01b03167fed8889f560326eb138920d842192f0eb3dd22b4f139c87a2c57538e05bae1278600080a3005b60405162461bcd60e51b815260206004820152601760248201527f43616e6e6f74207472616e7366657220746f2073656c660000000000000000006044820152606490fd5b6000546001600160a01b0316330361098657565b60405162461bcd60e51b815260206004820152601660248201527527b7363c9031b0b63630b1363290313c9037bbb732b960511b6044820152606490fd5b9193610a4b989694610a46989692610a4195610a19604051966109e688610285565b60008852600060208901526000604089015260608089015260606080890152606060a0890152606060c089015287610efa565b815115610a715750610a2c915084610f23565b8051610a61575b508051610a51575b50610d27565b610ab5565b600455565b60045490565b610a5b9082610fea565b38610a3b565b610a6b9083610fcb565b38610a33565b90506001600160401b038116610a89575b5050610a2c565b610a939185610f49565b3880610a82565b90816020910312610356575190565b6040513d6000823e3d90fd5b92906020926001600160401b039263ffffffff610af4604051978896879663230e93b160e11b885216600487015260a0602487015260a4860190610395565b60016044860152921660648401526084830152038160007f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165af1908115610b9e57600091610b70575b50807f1131472297a800fee664d1d89cfa8f7676ff07189ecc53f80bbb5f4969099db8600080a290565b610b91915060203d8111610b97575b610b8981836102c0565b810190610a9a565b38610b46565b503d610b7f565b610aa9565b60405190610bb0826102a5565b600c82526b31b7b232a637b1b0ba34b7b760a11b6020830152565b634e487b7160e01b600052602160045260246000fd5b60031115610beb57565b610bcb565b60405190610bfd826102a5565b60088252676c616e677561676560c01b6020830152565b60011115610beb57565b60405190610c2b826102a5565b6006825265736f7572636560d01b6020830152565b60405190610c4d826102a5565b60048252636172677360e01b6020830152565b634e487b7160e01b600052601160045260246000fd5b6000198114610c855760010190565b610c60565b8051821015610c9e5760209160051b010190565b634e487b7160e01b600052603260045260246000fd5b60405190610cc1826102a5565b600f82526e39b2b1b932ba39a637b1b0ba34b7b760891b6020830152565b60405190610cec826102a5565b60078252667365637265747360c81b6020830152565b60405190610d0f826102a5565b600982526862797465734172677360b81b6020830152565b610d2f611011565b90610d41610d3b610ba3565b836118ff565b610d5e8151610d4f81610be1565b610d5881610be1565b836110dd565b610d69610d3b610bf0565b610d836040820151610d7a81610c14565b610d5881610c14565b610d8e610d3b610c1e565b610d9c6060820151836118ff565b60a08101805151610ea1575b506080810190815151610e21575b60c0915001805151610dc9575b50515190565b91610dd5610d3b610d02565b610dde82611983565b60005b83518051821015610e0e5790610e04610dfd82610e0994610c8a565b518561184a565b610c76565b610de1565b50509150610e1b81611a0f565b38610dc3565b602081018051610e3081610be1565b610e3981610be1565b15610e8f5760c092610e72610e8a92610e59610e53610cb4565b886118ff565b51610e6381610be1565b610e6c81610be1565b866110dd565b610e83610e7d610cdf565b866118ff565b518461184a565b610db6565b60405163a80d31f760e01b8152600490fd5b92610eb3610ead610c40565b846118ff565b610ebc83611983565b60005b84518051821015610ee75790610e04610edb82610ee294610c8a565b51866118ff565b610ebf565b50509250610ef482611a0f565b38610da8565b815115610f11576000808252604082015260600152565b6040516322ce3edd60e01b8152600490fd5b815115610f37576001602082015260800152565b60405163e889636f60e01b8152600490fd5b9190610fbd608092610f8e60ff610f5e611011565b94610f87604051610f6e816102a5565b60068152651cdb1bdd125160d21b6020820152876118ff565b1684611a9c565b610fb7604051610f9d816102a5565b60078152663b32b939b4b7b760c91b6020820152846118ff565b82611a9c565b600260208401525151910152565b815115610fd85760a00152565b60405163fe936cb760e01b8152600490fd5b815115610fd85760c00152565b60405190611004826102a5565b6000602083606081520152565b60405161101d816102a5565b611025610ff7565b8082526020820160008152611038610ff7565b506101006020830152604051809252600082526101208201918210610356576000916040525290565b601f19810191908211610c8557565b9060208201809211610c8557565b91908201809211610c8557565b90611094610ff7565b50601f8116806110c3575b50806020830152604051908183526000825281016020019081106103565760405290565b60200360208111610c85578101809111610c85573861109f565b908151916110e9610ff7565b508251516001810190818111610c85576020850151811015611144575b60c2602061113a965192830101538051821161113c575b505060405191602083015260208252611135826102a5565b61184a565b565b52388061111d565b8160011b9482860460021483151715610c855760208161117661113a9861116f60c29551918461108b565b5082611792565b5096505050611106565b908160011b9180830460021490151715610c8557565b61119e610ff7565b508051516001810190818111610c855760208301518110156111d7575b605b602084519283010153805182116111d357505090565b5290565b8160011b82810460021483151715610c8557611200906111f98551918661108b565b5084611792565b506111bb565b61120e610ff7565b508051516001810190818111610c85576020830151811015611243575b605a602084519283010153805182116111d357505090565b8160011b82810460021483151715610c8557611265906111f98551918661108b565b5061122b565b611273610ff7565b508051516001810190818111610c855760208301518110156112a8575b6059602084519283010153805182116111d357505090565b8160011b82810460021483151715610c85576112ca906111f98551918661108b565b50611290565b6112d8610ff7565b508051516001810190818111610c8557602083015181101561130d575b6058602084519283010153805182116111d357505090565b8160011b82810460021483151715610c855761132f906111f98551918661108b565b506112f5565b61133d610ff7565b508051516001810190818111610c85576020830151811015611372575b607b602084519283010153805182116111d357505090565b8160011b82810460021483151715610c8557611394906111f98551918661108b565b5061135a565b6113a2610ff7565b508051516001810190818111610c855760208301518110156113d7575b607a602084519283010153805182116111d357505090565b8160011b82810460021483151715610c85576113f9906111f98551918661108b565b506113bf565b611407610ff7565b508051516001810190818111610c8557602083015181101561143c575b6079602084519283010153805182116111d357505090565b8160011b82810460021483151715610c855761145e906111f98551918661108b565b50611424565b61146c610ff7565b508051516001810190818111610c855760208301518110156114a1575b6078602084519283010153805182116111d357505090565b8160011b82810460021483151715610c85576114c3906111f98551918661108b565b50611489565b6114d1610ff7565b508051516001810190818111610c85576020830151811015611506575b601b602084519283010153805182116111d357505090565b8160011b82810460021483151715610c8557611528906111f98551918661108b565b506114ee565b611536610ff7565b508051516001810190818111610c8557602083015181101561156b575b601a602084519283010153805182116111d357505090565b8160011b82810460021483151715610c855761158d906111f98551918661108b565b50611553565b61159b610ff7565b508051516001810190818111610c855760208301518110156115d0575b6019602084519283010153805182116111d357505090565b8160011b82810460021483151715610c85576115f2906111f98551918661108b565b506115b8565b611600610ff7565b508051516001810190818111610c85576020830151811015611635575b6018602084519283010153805182116111d357505090565b8160011b82810460021483151715610c8557611657906111f98551918661108b565b5061161d565b90611666610ff7565b508151516001810191828211610c85576020840151821015611699575b602084519283010153805182116111d357505090565b8260011b83810460021484151715610c85576116c2906116bb8651918761108b565b5085611792565b50611683565b906116d58251918361108b565b506116de610ff7565b508051906116ea610ff7565b506116f88151831115611843565b82515192611706838561107e565b91602092828480940151821161177b575b5183815197820101968211611773575b505001915b8181101561174d5760001991036101000a0190811990511690825116179052565b919261176861176261176e9286518152611070565b94611070565b92611061565b61172c565b523880611727565b61178d61178783611180565b826116c8565b611717565b9061179b610ff7565b5080516117a6610ff7565b506117b48251821115611843565b825151916117c2828461107e565b602091829182870151811161182c575b865183815197820101968211611824575b505001915b8181101561180a5760001991036101000a019081199051169082511617905290565b919261176861176261181f9286518152611070565b6117e8565b5238806117e3565b61183e61183882611180565b886116c8565b6117d2565b1561035657565b81516118819291906001600160401b0381169060178211611884576118799150604060ff84519216179061165d565b505b51611792565b50565b5060ff81116118a9576118a39061189b83516112d0565b508251611c69565b5061187b565b61ffff81116118c8576118a3906118c0835161126b565b508251611c02565b63ffffffff81116118e9576118a3906118e18351611206565b508251611b99565b6118a3906118f78351611196565b508251611b2d565b81516118819291906001600160401b038116906017821161192e576118799150606060ff84519216179061165d565b5060ff8111611945576118a39061189b8351611464565b61ffff811161195c576118a3906118c083516113ff565b63ffffffff8111611975576118a3906118e1835161139a565b6118a3906118f78351611335565b80519061198e610ff7565b508151516001810190818111610c855760208401518110156119dc575b609f60208095519283010153805182116119d4575b50500180519060018201809211610c855752565b5238806119c0565b8160011b9382850460021483151715610c8557602081611a05829761116f609f9551918461108b565b50955050506119ab565b805190611a1a610ff7565b508151516001810190818111610c85576020840151811015611a69575b60ff6020809551928301015380518211611a61575b5050018051600019810191908211610c855752565b523880611a4c565b8160011b9382850460021483151715610c8557602081611a92829761116f60ff9551918461108b565b5095505050611a37565b906001600160401b03811660178111611abf575060ff611881925191169061165d565b905060ff8111611ade5781611ad761188193516115f8565b5051611c69565b61ffff8111611afc5781611af56118819351611593565b5051611c02565b63ffffffff8111611b1c5781611b15611881935161152e565b5051611b99565b81611b2a61188193516114c9565b50515b90611b36610ff7565b50815151806008019182600811610c855760208401518311611b78575b6008845192830101906001600160401b0319825116179052805182116111d357505090565b8260011b83810460021484151715610c8557611b9490856116c8565b611b53565b90611ba2610ff7565b50815151806004019182600411610c855760208401518311611be1575b60048451928301019063ffffffff19825116179052805182116111d357505090565b8260011b83810460021484151715610c8557611bfd90856116c8565b611bbf565b90611c0b610ff7565b50815151806002019182600211610c855760208401518311611c48575b60028451928301019061ffff19825116179052805182116111d357505090565b8260011b83810460021484151715610c8557611c6490856116c8565b611c28565b90611c72610ff7565b50815151806001019182600111610c855760208401518311611cae575b60018451928301019060ff19825116179052805182116111d357505090565b8260011b83810460021484151715610c8557611cca90856116c8565b611c8f565b601f8111611cdb575050565b6000906003825260008051602061209e833981519152906020601f850160051c83019410611d24575b601f0160051c01915b828110611d1957505050565b818155600101611d0d565b9092508290611d04565b601f8111611d3a575050565b6000906002825260008051602061207e833981519152906020601f850160051c83019410611d83575b601f0160051c01915b828110611d7857505050565b818155600101611d6c565b9092508290611d63565b9081516001600160401b0381116102a057611db281611dad60035461035b565b611ccf565b602080601f8311600114611dee5750819293600092611de3575b50508160011b916000199060031b1c191617600355565b015190503880611dcc565b90601f19831694611e0f600360005260008051602061209e83398151915290565b926000905b878210611e4c575050836001959610611e33575b505050811b01600355565b015160001960f88460031b161c19169055388080611e28565b80600185968294968601518155019501930190611e14565b9081516001600160401b0381116102a057611e8981611e8460025461035b565b611d2e565b602080601f8311600114611ec55750819293600092611eba575b50508160011b916000199060031b1c191617600255565b015190503880611ea3565b90601f19831694611ee6600260005260008051602061207e83398151915290565b926000905b878210611f23575050836001959610611f0a575b505050811b01600255565b015160001960f88460031b161c19169055388080611eff565b80600185968294968601518155019501930190611eeb565b60025460009291611f4b8261035b565b80825291600190818116908115611fb05750600114611f6957505050565b91929350600260005260008051602061207e833981519152916000925b848410611f9857505060209250010190565b80546020858501810191909152909301928101611f86565b915050602093945060ff929192191683830152151560051b010190565b604081526000600354611fdf8161035b565b9081604085015260019081811690816000146120585750600114612011575b50508160206103e6938303910152611f3b565b60036000908152925060008051602061209e8339815191525b8284106120425750505081016060016103e638611ffe565b805460608587010152602090930192810161202a565b90506103e6949350606092915060ff191682840152151560051b820101909138611ffe56fe405787fa12a823e0f2b7631cc41b3ba8828b3321ca811111fa75cd3aa3bb5acec2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85ba26469706673582212209a0fde68bd6d502894cc997c9d1a5b721c68d04dccbc5327015a9a604bf67b4464736f6c63430008140033608060405234620004db576200123a803803806200001d81620004e0565b9283398101606082820312620004db5781516001600160401b039190828111620004db57816200004f91850162000506565b9060209384810151848111620004db57826200006d91830162000506565b916040820151858111620004db5762000087920162000506565b825191848311620004c5576000908154936001958686811c96168015620004ba575b89871014620003c4578190601f9687811162000467575b50899087831160011462000403578592620003f7575b5050600019600383901b1c191690861b1782555b805190868211620003e35785548681811c91168015620003d8575b89821014620003c45790818684931162000371575b5088908683116001146200030d57849262000301575b5050600019600383901b1c191690851b1784555b3315620002e95760068054336001600160a01b0319821681179092556001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a38151948511620002d5576008548481811c91168015620002ca575b87821014620002b6578381116200026d575b508592851160011462000204579394508492919083620001f8575b50501b916000199060031b1c1916176008555b604051610cc19081620005798239f35b015192503880620001d5565b6008815285812093958591601f198316915b8883831062000252575050501062000238575b505050811b01600855620001e8565b015160001960f88460031b161c1916905538808062000229565b85870151885590960195948501948793509081019062000216565b600882528682208480880160051c820192898910620002ac575b0160051c019085905b828110620002a0575050620001ba565b83815501859062000290565b9250819262000287565b634e487b7160e01b82526022600452602482fd5b90607f1690620001a8565b634e487b7160e01b81526041600452602490fd5b60249060405190631e4fbdf760e01b82526004820152fd5b01519050388062000130565b8785528985208894509190601f198416865b8c8282106200035a575050841162000340575b505050811b01845562000144565b015160001960f88460031b161c1916905538808062000332565b8385015186558b979095019493840193016200031f565b9091508684528884208680850160051c8201928b8610620003ba575b918991869594930160051c01915b828110620003ab5750506200011a565b8681558594508991016200039b565b925081926200038d565b634e487b7160e01b84526022600452602484fd5b90607f169062000105565b634e487b7160e01b83526041600452602483fd5b015190503880620000d6565b8580528a86208994509190601f198416875b8d82821062000450575050841162000436575b505050811b018255620000ea565b015160001960f88460031b161c1916905538808062000428565b8385015186558c9790950194938401930162000415565b9091508480528985208780850160051c8201928c8610620004b0575b918a91869594930160051c01915b828110620004a1575050620000c0565b8781558594508a910162000491565b9250819262000483565b95607f1695620000a9565b634e487b7160e01b600052604160045260246000fd5b600080fd5b6040519190601f01601f191682016001600160401b03811183821017620004c557604052565b919080601f84011215620004db5782516001600160401b038111620004c5576020906200053c601f8201601f19168301620004e0565b92818452828287010111620004db5760005b8181106200056457508260009394955001015290565b85810183015184820184015282016200054e56fe6080604081815260048036101561001557600080fd5b600092833560e01c90816301ffc9a714610aa25750806306fdde03146109d7578063081812fc1461099c578063095ea7b31461094657806323b872dd146108f057806342842e0e1461088e5780636352211e1461085d57806370a0823114610808578063715018a6146107ab5780638da5cb5b1461078257806395d89b41146106b657806398bdf6f514610697578063a144819414610426578063a22cb465146103ba578063b88d4fde146102f4578063c87b56dd146101cd578063e985e9c51461017b5763f2fde38b146100e957600080fd5b3461017757602036600319011261017757610102610b4e565b9061010b610c24565b6001600160a01b03918216928315610161575050600654826bffffffffffffffffffffffff60a01b821617600655167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b51631e4fbdf760e01b8152908101849052602490fd5b8280fd5b5050346101c957806003193601126101c95760ff8160209361019b610b4e565b6101a3610b69565b6001600160a01b0391821683526005875283832091168252855220549151911615158152f35b5080fd5b509190346101c95760209081600319360112610177576101ed8435610c50565b50805192806008549060019082821c9282811680156102ea575b87851081146102d7578899509688969785829a5291826000146102b0575050600114610254575b5050506102509291610241910385610be6565b51928284938452830190610b0e565b0390f35b9190869350600883527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee35b828410610298575050508201018161024161025061022e565b8054848a01860152889550879490930192810161027f565b60ff19168782015293151560051b860190930193508492506102419150610250905061022e565b634e487b7160e01b835260228a52602483fd5b93607f1693610207565b5090346101775760803660031901126101775761030f610b4e565b50610318610b69565b5060643567ffffffffffffffff81116103b657366023820112156103b657808301359061034482610c08565b9061035184519283610be6565b82825236602484830101116103b2578260649692602095946024879401848301370101525162461bcd60e51b815291820152601e60248201527f736166655472616e7366657246726f6d2069736e277420616c6c6f77656400006044820152fd5b8580fd5b8380fd5b5082346104235782600319360112610423576103d4610b4e565b506024358015150361042357506020606492519162461bcd60e51b8352820152601f60248201527f736574417070726f76616c466f72416c6c2069736e277420616c6c6f776564006044820152fd5b80fd5b509190346101c957806003193601126101c957610441610b4e565b9261044a610c24565b60075492600019908185146106845760018501600755835161046b81610bb4565b8181526001600160a01b039680881693841561066d5787845260209860028a528785205416908115159081610642575b5085855260038a528785206001815401905588855260028a52878520866bffffffffffffffffffffffff60a01b82541617905588868951937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8880a461062d57503b61050c575b5050505051908152f35b84939591929451878180610547630a85bd0160e11b95868352338c840152886024840152876044840152608060648401526084830190610b0e565b0381878a5af18491816105e9575b506105b3575050503d6000146105ab573d61056f81610c08565b9061057c84519283610be6565b81528091863d92013e5b805194856105a557505051633250574960e11b81529182015260249150fd5b85925001fd5b506060610586565b9195939492506001600160e01b0319909116036105d557505038808080610502565b6024925191633250574960e11b8352820152fd5b9091508881813d8311610626575b6106018183610be6565b8101031261062257516001600160e01b031981168103610622579038610555565b8480fd5b503d6105f7565b6339e3563760e11b8152858101849052602490fd5b878b5288862080546001600160a01b031916905582865260038b52888620805490910190553861049b565b8651633250574960e11b8152808701859052602490fd5b634e487b7160e01b815260118352602490fd5b5050346101c957816003193601126101c9576020906007549051908152f35b5091346104235780600319360112610423578151918160019283549384811c91818616958615610778575b60209687851081146102d7578899509688969785829a5291826000146102b057505060011461071d575050506102509291610241910385610be6565b91908693508083527fb10e2d527612073b26eecdfd717e6a320cf44b4afac2b0732d9fcbe2b7fa0cf65b828410610760575050508201018161024161025061022e565b8054848a018601528895508794909301928101610747565b92607f16926106e1565b5050346101c957816003193601126101c95760065490516001600160a01b039091168152602090f35b83346104235780600319360112610423576107c4610c24565b600680546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b509134610423576020366003190112610423576001600160a01b0361082b610b4e565b169283156108485750806020938392526003845220549051908152f35b91516322718ad960e21b815291820152602490fd5b509134610423576020366003190112610423575061087d60209235610c50565b90516001600160a01b039091168152f35b509034610177576020906064936108a436610b7f565b50505081516108b281610bb4565b525162461bcd60e51b815291820152601e60248201527f736166655472616e7366657246726f6d2069736e277420616c6c6f77656400006044820152fd5b5082346104235750602060649261090636610b7f565b505050519162461bcd60e51b8352820152601a60248201527f7472616e7366657246726f6d2069736e277420616c6c6f7765640000000000006044820152fd5b508234610423578260031936011261042357506020606492610966610b4e565b505162461bcd60e51b8152918201526015602482015274105c1c1c9bdd99481a5cdb89dd08185b1b1bddd959605a1b6044820152fd5b5034610177576020366003190112610177579182602093356109bd81610c50565b50825283528190205490516001600160a01b039091168152f35b50913461042357806003193601126104235781519181825492600184811c91818616958615610a98575b60209687851081146102d7578899509688969785829a5291826000146102b0575050600114610a3d575050506102509291610241910385610be6565b91908693508280527f290decd9548b62a8d60345a988386fc84ba6bc95484008f6362f93160ef3e5635b828410610a80575050508201018161024161025061022e565b8054848a018601528895508794909301928101610a67565b92607f1692610a01565b92505034610177576020366003190112610177573563ffffffff60e01b811680910361017757602092506380ac58cd60e01b8114908115610afd575b8115610aec575b5015158152f35b6301ffc9a760e01b14905038610ae5565b635b5e139f60e01b81149150610ade565b919082519283825260005b848110610b3a575050826000602080949584010152601f8019910116010190565b602081830181015184830182015201610b19565b600435906001600160a01b0382168203610b6457565b600080fd5b602435906001600160a01b0382168203610b6457565b6060906003190112610b64576001600160a01b03906004358281168103610b6457916024359081168103610b64579060443590565b6020810190811067ffffffffffffffff821117610bd057604052565b634e487b7160e01b600052604160045260246000fd5b90601f8019910116810190811067ffffffffffffffff821117610bd057604052565b67ffffffffffffffff8111610bd057601f01601f191660200190565b6006546001600160a01b03163303610c3857565b60405163118cdaa760e01b8152336004820152602490fd5b6000818152600260205260409020546001600160a01b0316908115610c73575090565b60249060405190637e27328960e01b82526004820152fdfea264697066735822122097b002b78cc008f076a8867d40f154a3d05425e51d9ce7dcbdceda725d737f0264736f6c63430008140033",
  "deployedBytecode": "0x608080604052600436101561001d575b50361561001b57600080fd5b005b600090813560e01c90816302598e0a146113d85750806306fdde0314611316578063095ea7b31461126357806318160ddd1461124557806322a0bb6b1461121c57806323b872dd146111dd57806324600fc314611188578063313ce5671461116c57806342966c681461114e57806348a3b4a4146111255780634da2d12a146110fc57806370a08231146110c4578063715018a61461106757806379cc6790146110365780637f0924841461100d5780638a5b44b314610ef55780638da5cb5b14610ecc57806391a89a2914610ea357806395d89b4114610d92578063a9059cbb14610c2e578063abc3e88b14610865578063c37964bd14610847578063d8f1d72414610829578063dd62ed3e146107de578063ded7c1301461037b578063e75ad115146101e05763f2fde38b0361000f57346101dd5760203660031901126101dd57610168611445565b610170611554565b6001600160a01b039081169081156101c457600554826bffffffffffffffffffffffff60a01b821617600555167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08380a380f35b604051631e4fbdf760e01b815260048101849052602490fd5b80fd5b50346101dd5760403660031901126101dd576101fa611445565b60243590610206611554565b61021182151561172e565b61021d82600d54611638565b600c548181106102da575b50506001600160a01b03169081156102c15760208161026a7fa46287cd6870c6d05612bb95b96833337e1e8a0ccea8be539c860dee7ac5f6e193600254611638565b6002558385528482526040852081815401905583857fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef84604051858152a36102b481600d54611638565b600d55604051908152a280f35b60405163ec442f0560e01b815260048101849052602490fd5b6102e39161177a565b60065460075485916001600160a01b039182169116803b156103775760405163f3fef3a360e01b81526001600160a01b039290921660048301526024820184905282908290604490829084905af1801561036c57610354575b505061034a90600c54611638565b600c553880610228565b61035d90611476565b61036857833861033c565b8380fd5b6040513d84823e3d90fd5b8280fd5b50346101dd576101203660031901126101dd576004356001600160401b0381116106a6576103ad9036906004016114f6565b6024356001600160401b038111610377576103cc9036906004016114f6565b60443560ff81168103610368576064356001600160401b03811681036107da576084356001600160401b0381116107d657366023820112156107d65780600401356104168161153d565b9161042460405193846114ba565b818352602083019160051b81016024018236821161075e5760248301905b8282106107a357505050506001600160401b0360a4351161079f5736602360a43501121561079f5760a435600401359361047b8561153d565b9061048960405192836114ba565b8582526020820180963660248260051b60a43501011161079b57602460a43501915b60248260051b60a435010183106107625750505060c435936001600160401b038516850361075e578960e4359663ffffffff881688036106a657916001600160401b03610124979593836040809e9c9997959e516105088161149f565b828152826020820152015261051b611554565b60ff61056160018060a01b03600b54169d61054f6040519e8f9d8e6352a81eeb60e01b815261012060048201520190611420565b8c81036003190160248e015290611420565b941660448a015216606488015260031987830301608488015251808252602082019160208260051b82010194928c915b8383106107255750505050506003198583030160a486015251808252602082019160208260051b82010194928a915b8383106106f05750505050509063ffffffff6020946001600160401b0385941660c48501521660e4830152610104803590830152038186865af180156106e55783906106b2575b6060915060246040518094819363e3e784a560e01b835260048301525afa801561036c5782918390849261066a575b5060609350604080516106488161149f565b8481526020810192835201918252604051928352516020830152516040820152f35b925050506060813d82116106aa575b81610686606093836114ba565b810103126106a65760609150805160406020830151920151909184610636565b5080fd5b3d9150610679565b506020813d6020116106dd575b816106cc602093836114ba565b810103126103775760609051610607565b3d91506106bf565b6040513d85823e3d90fd5b9193979650919394602080610711600193601f198682030187528b51611420565b9901930193019092889697959492936105c0565b91939697999850919394602080610748600193601f198682030187528a51611420565b98019301930190928a9899979695949293610591565b8980fd5b8235906001600160401b038211610797576020809161078a60249485369160a43501016114f6565b81520193019290506104ab565b8c80fd5b8a80fd5b8680fd5b81356001600160401b0381116107d2576020916107c78392602436918901016114f6565b815201910190610442565b8b80fd5b8580fd5b8480fd5b50346101dd5760403660031901126101dd5760406020916107fd611445565b610805611460565b6001600160a01b039182168352600185528383209116825283522054604051908152f35b50346101dd57806003193601126101dd576020600c54604051908152f35b50346101dd57806003193601126101dd576020600d54604051908152f35b50346101dd5760403660031901126101dd5761087f611445565b60243561088a611554565b61089581151561172e565b60018060a01b03908183169283855260209085825260408620548311610be957600c54869190848110610b1757508460075416803b1561037757828091602460405180948193633790cf5760e01b83528a60048401525af19081156106e5578391610b03575b505061090984600c5461177a565b600c555b61091984600d5461177a565b600d556109268433611580565b600a54604051632851206560e21b81526001600160a01b0383166004820152602481018690529590849087906044908290879086165af19586156106e5578396610ad4575b506008541690610984670de0b6b3a764000086046117c6565b610a4f60706040518093600360fc1b89830152602b60f81b806021840152603360f81b602284015280602384015268436f6e67726174732160b81b6024840152602d8301527f596f75206a75737420726563656976656420616e206f66667365742063657274602e83015268034b334b1b0ba3290960bd1b604e8301526f02cb7bab91037b33339b2ba103bb0b9960851b6057830152610a2d815180928b6067860191016113fd565b81016820434f3220546f6e7360b81b60678201520360508101845201826114ba565b823b1561036857610a799284928360405180968195829463ba3d69d760e01b845260048401611787565b03925af1801561036c57610abc575b5050907fd01c6570076b5796ea5b39d13cb939955b5d2ec43f5ba7ee52e6cd5613823aad926040928351928352820152a280f35b610ac890939293611476565b6107da57908438610a88565b9095508381813d8311610afc575b610aec81836114ba565b810103126103775751943861096b565b503d610ae2565b610b0c90611476565b6106a65781386108fb565b610b239192508461177a565b86856006541691866007541692803b156103775760405163f3fef3a360e01b81526001600160a01b0394909416600485015260248401919091528290604490829084905af18015610bde57610bcb575b5085908460075416803b1561037757828091602460405180948193633790cf5760e01b83528a60048401525af19081156106e5578391610bb7575b50600c5561090d565b610bc090611476565b6106a6578138610bae565b610bd790969196611476565b9438610b73565b6040513d89823e3d90fd5b60405162461bcd60e51b815260048101839052601a60248201527f496e73756666696369656e7420434152424f4e20746f6b656e730000000000006044820152606490fd5b50346101dd5760403660031901126101dd57610c48611445565b9060243591610c5883823361196c565b6008546001600160a01b031690610d30604a610c86670de0b6b3a7640000610c7f33611a31565b97046117c6565b95604051968791600360fc1b6020840152602b60f81b806021850152603360f81b602285015280602385015268436f6e67726174732160b81b6024850152602d840152610cdd815180926020602e870191016113fd565b82016c0103a3930b739b332b93932b21609d1b602e820152610d09825180936020603b850191016113fd565b016e20434152424f4e20746f20796f752160881b603b82015203602a8101875201856114ba565b813b1561037757928291610d5b948360405180978195829463ba3d69d760e01b845260048401611787565b03925af1908115610d865750610d77575b602060405160018152f35b610d8090611476565b38610d6c565b604051903d90823e3d90fd5b50346101dd57806003193601126101dd57604051908060045491600183811c92818516948515610e99575b6020958686108114610e8557858852879493929187908215610e63575050600114610e09575b5050610df1925003836114ba565b610e05604051928284938452830190611420565b0390f35b90859250600482527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b5b858310610e4b575050610df193508201013880610de3565b80548389018501528794508693909201918101610e33565b9250935050610df194915060ff191682840152151560051b8201013880610de3565b634e487b7160e01b83526022600452602483fd5b93607f1693610dbd565b50346101dd57806003193601126101dd576006546040516001600160a01b039091168152602090f35b50346101dd57806003193601126101dd576005546040516001600160a01b039091168152602090f35b50346101dd57806003193601126101dd57610f0e611554565b6007546040516370a0823160e01b81523060048201528291602091906001600160a01b03168282602481845afa80156110025783928591610fca575b5060405163a9059cbb60e01b8152336004820152602481019190915293849190829081604481015b03925af19081156106e5578391610f91575b83610f8e8361192e565b80f35b905081813d8311610fc3575b610fa781836114ba565b810103126106a6575180151581036106a657610f8e9038610f84565b503d610f9d565b8381939492503d8311610ffb575b610fe281836114ba565b81010312610ff65751829190610f72610f4a565b505050fd5b503d610fd8565b6040513d86823e3d90fd5b50346101dd57806003193601126101dd57600a546040516001600160a01b039091168152602090f35b50346101dd5760403660031901126101dd57610f8e611053611445565b6024359061106282338361165b565b611580565b50346101dd57806003193601126101dd57611080611554565b600580546001600160a01b0319811690915581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b50346101dd5760203660031901126101dd576020906040906001600160a01b036110ec611445565b1681528083522054604051908152f35b50346101dd57806003193601126101dd57600b546040516001600160a01b039091168152602090f35b50346101dd57806003193601126101dd576008546040516001600160a01b039091168152602090f35b50346101dd5760203660031901126101dd57610f8e60043533611580565b50346101dd57806003193601126101dd57602060405160128152f35b50346101dd57806003193601126101dd576111a1611554565b610f8e8180808047335af13d156111d8573d6111bc816114db565b906111ca60405192836114ba565b81528360203d92013e61192e565b61192e565b50346101dd5760603660031901126101dd57610c58906111fb611445565b611203611460565b92839160443594859161121783338361165b565b61196c565b50346101dd57806003193601126101dd576007546040516001600160a01b039091168152602090f35b50346101dd57806003193601126101dd576020600254604051908152f35b50346101dd5760403660031901126101dd5761127d611445565b6024359033156112fd576001600160a01b03169182156112e55760408291338152600160205281812085825260205220556040519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560203392a3602060405160018152f35b60249060405190634a1406b160e11b82526004820152fd5b60405163e602df0560e01b815260048101849052602490fd5b50346101dd57806003193601126101dd57604051908060035491600183811c928185169485156113ce575b6020958686108114610e8557858852879493929187908215610e63575050600114611374575050610df1925003836114ba565b90859250600382527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b5b8583106113b6575050610df193508201013880610de3565b8054838901850152879450869390920191810161139e565b93607f1693611341565b9050346106a657816003193601126106a6576009546001600160a01b03168152602090f35b60005b8381106114105750506000910152565b8181015183820152602001611400565b90602091611439815180928185528580860191016113fd565b601f01601f1916010190565b600435906001600160a01b038216820361145b57565b600080fd5b602435906001600160a01b038216820361145b57565b6001600160401b03811161148957604052565b634e487b7160e01b600052604160045260246000fd5b606081019081106001600160401b0382111761148957604052565b90601f801991011681019081106001600160401b0382111761148957604052565b6001600160401b03811161148957601f01601f191660200190565b81601f8201121561145b5780359061150d826114db565b9261151b60405194856114ba565b8284526020838301011161145b57816000926020809301838601378301015290565b6001600160401b0381116114895760051b60200190565b6005546001600160a01b0316330361156857565b60405163118cdaa760e01b8152336004820152602490fd5b906001600160a01b03821690811561161f57600092828452836020526040842054908282106115ed5750817fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef926020928587528684520360408620558060025403600255604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101829052606490fd5b604051634b637e8f60e11b815260006004820152602490fd5b9190820180921161164557565b634e487b7160e01b600052601160045260246000fd5b9160018060a01b03809316916000938385526001602052604093848620918316918287526020528486205492600019840361169a575b50505050505050565b8484106116fe575080156116e65781156116ce57855260016020528385209085526020520391205538808080808080611691565b8451634a1406b160e11b815260048101879052602490fd5b845163e602df0560e01b815260048101879052602490fd5b8551637dc7a0d960e11b81526001600160a01b039190911660048201526024810184905260448101859052606490fd5b1561173557565b60405162461bcd60e51b815260206004820152601f60248201527f416d6f756e742073686f756c642062652067726561746572207468616e2030006044820152606490fd5b9190820391821161164557565b73aa7880db88d8e051428b5204817e58d8327340de81526001600160a01b0390911660208201526060604082018190526117c392910190611420565b90565b806000917a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000080821015611920575b506d04ee2d6d415b85acef810000000080831015611911575b50662386f26fc1000080831015611902575b506305f5e100808310156118f3575b50612710808310156118e4575b5060648210156118d4575b600a809210156118ca575b6001908160218186019561185f876114db565b9661186d60405198896114ba565b80885261187c601f19916114db565b01366020890137860101905b611894575b5050505090565b600019019083906f181899199a1a9b1b9c1cb0b131b232b360811b8282061a8353049182156118c557919082611888565b61188d565b916001019161184c565b9190606460029104910191611841565b60049193920491019138611836565b60089193920491019138611829565b6010919392049101913861181a565b60209193920491019138611808565b6040935081049150386117ef565b1561193557565b60405162461bcd60e51b815260206004820152600f60248201526e151c985b9cd9995c8819985a5b1959608a1b6044820152606490fd5b916001600160a01b0380841692831561161f5716928315611a1857600090838252816020526040822054908382106119e6575091604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815220818154019055604051908152a3565b60405163391434e360e21b81526001600160a01b03919091166004820152602481019190915260448101839052606490fd5b60405163ec442f0560e01b815260006004820152602490fd5b604051906001600160a01b031680611a488361149f565b602a835260208084016040368237845115611b1f5760309053835190600191821015611b1f5790607860218601536029915b818311611aab57505050611a8c575090565b6044906040519063e22e27eb60e01b8252600482015260146024820152fd5b909192600f81166010811015611b0a578651851015611b0a576f181899199a1a9b1b9c1cb0b131b232b360811b901a86850183015360041c928015611af557600019019190611a7a565b60246000634e487b7160e01b81526011600452fd5b60246000634e487b7160e01b81526032600452fd5b634e487b7160e01b600052603260045260246000fdfea2646970667358221220ea96270c9ebb181ce3cc642cc27ede41ff7a255123fb2705c50fa205de740eb664736f6c63430008140033",
  "devdoc": {
    "errors": {
      "ERC20InsufficientAllowance(address,uint256,uint256)": [
        {
          "details": "Indicates a failure with the `spender`’s `allowance`. Used in transfers.",
          "params": {
            "allowance": "Amount of tokens a `spender` is allowed to operate with.",
            "needed": "Minimum amount required to perform a transfer.",
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "ERC20InsufficientBalance(address,uint256,uint256)": [
        {
          "details": "Indicates an error related to the current `balance` of a `sender`. Used in transfers.",
          "params": {
            "balance": "Current balance for the interacting account.",
            "needed": "Minimum amount required to perform a transfer.",
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidApprover(address)": [
        {
          "details": "Indicates a failure with the `approver` of a token to be approved. Used in approvals.",
          "params": {
            "approver": "Address initiating an approval operation."
          }
        }
      ],
      "ERC20InvalidReceiver(address)": [
        {
          "details": "Indicates a failure with the token `receiver`. Used in transfers.",
          "params": {
            "receiver": "Address to which tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSender(address)": [
        {
          "details": "Indicates a failure with the token `sender`. Used in transfers.",
          "params": {
            "sender": "Address whose tokens are being transferred."
          }
        }
      ],
      "ERC20InvalidSpender(address)": [
        {
          "details": "Indicates a failure with the `spender` to be approved. Used in approvals.",
          "params": {
            "spender": "Address that may be allowed to operate on tokens without being their owner."
          }
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "StringsInsufficientHexLength(uint256,uint256)": [
        {
          "details": "The `value` string doesn't fit in the specified `length`."
        }
      ]
    },
    "events": {
      "Approval(address,address,uint256)": {
        "details": "Emitted when the allowance of a `spender` for an `owner` is set by a call to {approve}. `value` is the new allowance."
      },
      "Transfer(address,address,uint256)": {
        "details": "Emitted when `value` tokens are moved from one account (`from`) to another (`to`). Note that `value` may be zero."
      }
    },
    "kind": "dev",
    "methods": {
      "allowance(address,address)": {
        "details": "See {IERC20-allowance}."
      },
      "approve(address,uint256)": {
        "details": "See {IERC20-approve}. NOTE: If `value` is the maximum `uint256`, the allowance is not updated on `transferFrom`. This is semantically equivalent to an infinite approval. Requirements: - `spender` cannot be the zero address."
      },
      "balanceOf(address)": {
        "details": "See {IERC20-balanceOf}."
      },
      "burn(uint256)": {
        "details": "Destroys a `value` amount of tokens from the caller. See {ERC20-_burn}."
      },
      "burnFrom(address,uint256)": {
        "details": "Destroys a `value` amount of tokens from `account`, deducting from the caller's allowance. See {ERC20-_burn} and {ERC20-allowance}. Requirements: - the caller must have allowance for ``accounts``'s tokens of at least `value`."
      },
      "decimals()": {
        "details": "Returns the number of decimals used to get its user representation. For example, if `decimals` equals `2`, a balance of `505` tokens should be displayed to a user as `5.05` (`505 / 10 ** 2`). Tokens usually opt for a value of 18, imitating the relationship between Ether and Wei. This is the default value returned by this function, unless it's overridden. NOTE: This information is only used for _display_ purposes: it in no way affects any of the arithmetic of the contract, including {IERC20-balanceOf} and {IERC20-transfer}."
      },
      "name()": {
        "details": "Returns the name of the token."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "symbol()": {
        "details": "Returns the symbol of the token, usually a shorter version of the name."
      },
      "totalSupply()": {
        "details": "See {IERC20-totalSupply}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2750,
        "contract": "contracts/Carbon.sol:Carbon",
        "label": "_balances",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2756,
        "contract": "contracts/Carbon.sol:Carbon",
        "label": "_allowances",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 2758,
        "contract": "contracts/Carbon.sol:Carbon",
        "label": "_totalSupply",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      },
      {
        "astId": 2760,
        "contract": "contracts/Carbon.sol:Carbon",
        "label": "_name",
        "offset": 0,
        "slot": "3",
        "type": "t_string_storage"
      },
      {
        "astId": 2762,
        "contract": "contracts/Carbon.sol:Carbon",
        "label": "_symbol",
        "offset": 0,
        "slot": "4",
        "type": "t_string_storage"
      },
      {
        "astId": 2451,
        "contract": "contracts/Carbon.sol:Carbon",
        "label": "_owner",
        "offset": 0,
        "slot": "5",
        "type": "t_address"
      },
      {
        "astId": 6348,
        "contract": "contracts/Carbon.sol:Carbon",
        "label": "TCO2FaucetExtense",
        "offset": 0,
        "slot": "6",
        "type": "t_contract(ITCO2Faucet)7161"
      },
      {
        "astId": 6351,
        "contract": "contracts/Carbon.sol:Carbon",
        "label": "TCO2TokenExtense",
        "offset": 0,
        "slot": "7",
        "type": "t_contract(ITCO2Token)7173"
      },
      {
        "astId": 6353,
        "contract": "contracts/Carbon.sol:Carbon",
        "label": "EPNS_COMM_ADDRESS",
        "offset": 0,
        "slot": "8",
        "type": "t_address"
      },
      {
        "astId": 6355,
        "contract": "contracts/Carbon.sol:Carbon",
        "label": "LINK_TOKEN_ADDRESS",
        "offset": 0,
        "slot": "9",
        "type": "t_address"
      },
      {
        "astId": 6357,
        "contract": "contracts/Carbon.sol:Carbon",
        "label": "CARBON_CERTIFICATE_ADDRESS",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 6359,
        "contract": "contracts/Carbon.sol:Carbon",
        "label": "CARBON_CALCULATOR_ADDRESS",
        "offset": 0,
        "slot": "11",
        "type": "t_address"
      },
      {
        "astId": 6361,
        "contract": "contracts/Carbon.sol:Carbon",
        "label": "TCO2TokensInContract",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 6363,
        "contract": "contracts/Carbon.sol:Carbon",
        "label": "carbonTokensMinted",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_contract(ITCO2Faucet)7161": {
        "encoding": "inplace",
        "label": "contract ITCO2Faucet",
        "numberOfBytes": "20"
      },
      "t_contract(ITCO2Token)7173": {
        "encoding": "inplace",
        "label": "contract ITCO2Token",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}